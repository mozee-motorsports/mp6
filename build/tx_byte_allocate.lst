ARM GAS  /tmp/ccFP3aFa.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"tx_byte_allocate.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Middlewares/ST/threadx/common/src/tx_byte_allocate.c"
  19              		.section	.text._tx_byte_allocate,"ax",%progbits
  20              		.align	1
  21              		.global	_tx_byte_allocate
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_tx_byte_allocate:
  27              	.LVL0:
  28              	.LFB8:
   1:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /**************************************************************************/
   2:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
   3:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
   5:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  10:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /**************************************************************************/
  11:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
  12:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
  13:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /**************************************************************************/
  14:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /**************************************************************************/
  15:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /**                                                                       */
  16:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /**                                                                       */
  18:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /**   Byte Memory                                                         */
  19:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /**                                                                       */
  20:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /**************************************************************************/
  21:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /**************************************************************************/
  22:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
  23:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #define TX_SOURCE_CODE
  24:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
  25:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
  26:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /* Include necessary system files.  */
  27:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
  28:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #include "tx_api.h"
  29:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_ENABLE_EVENT_TRACE
  30:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #include "tx_trace.h"
ARM GAS  /tmp/ccFP3aFa.s 			page 2


  31:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
  32:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #include "tx_thread.h"
  33:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #include "tx_byte_pool.h"
  34:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
  35:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
  36:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /**************************************************************************/
  37:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  38:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*  FUNCTION                                               RELEASE        */
  39:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  40:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    _tx_byte_allocate                                   PORTABLE C      */
  41:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                           6.1          */
  42:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*  AUTHOR                                                                */
  43:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  44:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    William E. Lamie, Microsoft Corporation                             */
  45:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  46:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*  DESCRIPTION                                                           */
  47:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  48:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    This function allocates bytes from the specified memory byte        */
  49:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    pool.                                                               */
  50:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  51:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*  INPUT                                                                 */
  52:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  53:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    pool_ptr                          Pointer to pool control block     */
  54:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    memory_ptr                        Pointer to place allocated bytes  */
  55:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                        pointer                         */
  56:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    memory_size                       Number of bytes to allocate       */
  57:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    wait_option                       Suspension option                 */
  58:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  59:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*  OUTPUT                                                                */
  60:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  61:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    status                            Completion status                 */
  62:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  63:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*  CALLS                                                                 */
  64:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  65:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    _tx_thread_system_suspend         Suspend thread service            */
  66:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    _tx_thread_system_ni_suspend      Non-interruptable suspend thread  */
  67:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    _tx_byte_pool_search              Search byte pool for memory       */
  68:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  69:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*  CALLED BY                                                             */
  70:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  71:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    Application Code                                                    */
  72:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  73:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*  RELEASE HISTORY                                                       */
  74:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  75:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*    DATE              NAME                      DESCRIPTION             */
  76:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  77:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  78:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  79:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                            resulting in version 6.1    */
  80:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /*                                                                        */
  81:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** /**************************************************************************/
  82:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_o
  83:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** {
  29              		.loc 1 83 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccFP3aFa.s 			page 3


  33              		.loc 1 83 1 is_stmt 0 view .LVU1
  34 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 32
  37              		.cfi_offset 3, -32
  38              		.cfi_offset 4, -28
  39              		.cfi_offset 5, -24
  40              		.cfi_offset 6, -20
  41              		.cfi_offset 7, -16
  42              		.cfi_offset 8, -12
  43              		.cfi_offset 9, -8
  44              		.cfi_offset 14, -4
  45 0004 0446     		mov	r4, r0
  46 0006 8846     		mov	r8, r1
  47 0008 9946     		mov	r9, r3
  84:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
  85:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** TX_INTERRUPT_SAVE_AREA
  48              		.loc 1 85 1 is_stmt 1 view .LVU2
  86:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
  87:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** UINT                        status;
  49              		.loc 1 87 1 view .LVU3
  88:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** TX_THREAD                   *thread_ptr;
  50              		.loc 1 88 1 view .LVU4
  89:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** UCHAR                       *work_ptr;
  51              		.loc 1 89 1 view .LVU5
  90:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** UINT                        suspended_count;
  52              		.loc 1 90 1 view .LVU6
  91:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** TX_THREAD                   *next_thread;
  53              		.loc 1 91 1 view .LVU7
  92:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** TX_THREAD                   *previous_thread;
  54              		.loc 1 92 1 view .LVU8
  93:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** UINT                        finished;
  55              		.loc 1 93 1 view .LVU9
  94:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_ENABLE_EVENT_TRACE
  95:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** TX_TRACE_BUFFER_ENTRY       *entry_ptr;
  96:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** ULONG                       time_stamp =  ((ULONG) 0);
  97:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
  98:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_ENABLE_EVENT_LOGGING
  99:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** UCHAR                       *log_entry_ptr;
 100:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** ULONG                       upper_tbu;
 101:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** ULONG                       lower_tbu;
 102:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 103:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 104:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 105:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Round the memory size up to the next size that is evenly divisible by
 106:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****        an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
 107:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * 
  56              		.loc 1 107 5 view .LVU10
  57              		.loc 1 107 57 is_stmt 0 view .LVU11
  58 000a 0332     		adds	r2, r2, #3
  59              	.LVL1:
  60              		.loc 1 107 17 view .LVU12
  61 000c 22F00307 		bic	r7, r2, #3
  62              	.LVL2:
 108:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 109:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Disable interrupts.  */
 110:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     TX_DISABLE
ARM GAS  /tmp/ccFP3aFa.s 			page 4


  63              		.loc 1 110 5 is_stmt 1 view .LVU13
  64              	.LBB22:
  65              	.LBI22:
  66              		.file 2 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h"
   1:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
   2:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   3:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   5:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  10:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  11:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  12:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  13:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  14:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  15:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  16:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  18:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  20:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  21:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  22:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  23:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  24:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  25:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  26:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  28:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M7/GNU     */
  29:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                           6.1.12       */
  30:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  31:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  33:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  35:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  37:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  46:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  49:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  51:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  53:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
ARM GAS  /tmp/ccFP3aFa.s 			page 5


  54:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  04-25-2022      Scott Larson            Modified comments and added   */
  60:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            volatile to registers,      */
  61:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.11 */
  62:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  07-29-2022      Scott Larson            Modified comments and         */
  63:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            described BASEPRI usage,    */
  64:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.12 */
  65:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  66:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  67:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  68:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  69:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_H
  70:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  71:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  72:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  73:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  74:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  75:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  76:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  77:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  78:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  79:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_user.h"
  80:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  81:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  82:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  83:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  84:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  85:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <stdlib.h>
  86:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <string.h>
  87:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  88:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  89:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  90:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  91:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  92:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <yvals.h>
  93:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  94:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  95:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  96:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
  97:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  98:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  99:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 100:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 101:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 102:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
 103:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
 104:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
 105:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 106:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 107:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef __GNUC__
 108:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 109:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 110:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccFP3aFa.s 			page 6


 111:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 112:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 113:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define VOID                                    void
 114:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 115:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 116:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef int                                     INT;
 117:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 118:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef long                                    LONG;
 119:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 120:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 121:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 122:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 123:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 124:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 125:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 126:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 127:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 128:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 129:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 130:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 131:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 132:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 133:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 134:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 135:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 136:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 137:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 138:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 139:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 140:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 141:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 142:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 143:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 144:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 145:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 146:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 147:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 148:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 149:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 150:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 151:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 152:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* By default, ThreadX for Cortex-M uses the PRIMASK register to enable/disable interrupts.
 153:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** If using BASEPRI is desired, define the following two symbols for both c and assembly files:
 154:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_USE_BASEPRI - This tells ThreadX to use BASEPRI instead of PRIMASK.
 155:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_BASEPRI = (priority_mask << (8 - number_priority_bits)) - this defines the maximum priority
 156:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** Any interrupt with a higher priority than priority_mask will not be masked, thus the interrupt will
 157:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 158:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 159:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 160:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 161:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 162:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 163:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 164:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 165:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 166:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 167:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    source constants would be:
ARM GAS  /tmp/ccFP3aFa.s 			page 7


 168:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 169:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0x0a800024)
 170:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 171:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 172:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 173:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 174:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 175:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 176:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0xE0001004)
 177:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 178:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 179:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 180:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 181:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 182:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 183:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 184:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 185:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 186:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 187:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
 188:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 189:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 190:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 191:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 192:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 193:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 194:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 195:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 196:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 197:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 198:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 199:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 200:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 201:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 202:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 203:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 204:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 205:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 206:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 207:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 208:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 209:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 210:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    a function call.  */
 211:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 212:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 213:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 214:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 215:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 216:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 217:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 218:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 219:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 220:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 221:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 222:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 223:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    logic.  */
 224:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccFP3aFa.s 			page 8


 225:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 226:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 227:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 228:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 229:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 230:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 231:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 232:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 233:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 234:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 235:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 236:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 237:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 238:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 239:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 240:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 241:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 242:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 243:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 244:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 245:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 246:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 247:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 248:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 249:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 250:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 251:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 252:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 253:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 254:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 255:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 256:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 257:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 258:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 259:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 260:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 261:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 262:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 263:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 264:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 265:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 266:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 267:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 268:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 269:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 270:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 271:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 272:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 273:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 274:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 275:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 276:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 277:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 278:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 279:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 280:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 281:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
ARM GAS  /tmp/ccFP3aFa.s 			page 9


 282:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 283:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 284:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 285:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 286:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 287:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 288:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 289:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 290:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 291:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 292:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 293:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 294:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 295:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 296:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 297:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 298:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 299:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 300:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 301:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 302:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 303:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 304:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 305:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 306:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 307:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 308:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 309:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 310:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 311:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 312:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 313:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 314:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 315:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 316:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 317:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 318:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 319:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 320:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 321:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 322:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 323:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 324:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 325:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 326:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 327:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 328:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 329:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 330:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 331:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 332:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 333:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 334:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 335:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 336:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 337:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 338:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
ARM GAS  /tmp/ccFP3aFa.s 			page 10


 339:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 340:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 341:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 342:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 343:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 344:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 345:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 346:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 347:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 348:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 349:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 350:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 351:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 352:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 353:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 354:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 355:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 356:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 357:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 358:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 359:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 360:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 361:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 362:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 363:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 364:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 365:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 366:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 367:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 368:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 369:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 370:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 371:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 372:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 373:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 374:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 375:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 376:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 377:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 378:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 379:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 380:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 381:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 382:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 383:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 384:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 385:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 386:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 387:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 388:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 389:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 390:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 391:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 392:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 393:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((volatile ULONG *) 0xE00
 394:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 395:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
ARM GAS  /tmp/ccFP3aFa.s 			page 11


 396:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 397:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 398:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 399:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 400:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 401:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 402:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 403:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 404:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 405:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 406:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 407:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 408:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 409:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 410:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 411:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 412:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 413:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 414:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 415:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 416:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 417:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 418:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 419:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 420:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 421:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 422:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 423:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 424:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 425:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 426:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 427:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 428:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 429:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 430:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 431:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 432:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 433:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 434:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 435:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 436:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 437:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 438:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 439:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 440:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 441:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 442:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 443:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 444:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 445:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 446:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 447:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 448:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 449:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 450:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 451:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 452:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
ARM GAS  /tmp/ccFP3aFa.s 			page 12


 453:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 454:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 455:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 456:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 457:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 458:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 459:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 460:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 461:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 462:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 463:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 464:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 465:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 466:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 467:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 468:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 469:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 470:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 471:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 472:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 473:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 474:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 475:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 476:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 477:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 478:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 479:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 480:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 481:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 482:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 483:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 484:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 485:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 486:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 487:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 488:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 489:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 490:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(ipsr_value);
 491:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 492:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 493:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 494:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 495:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 496:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 497:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 498:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 499:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 500:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 501:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 502:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 503:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 504:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 505:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 506:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 507:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 508:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 509:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
ARM GAS  /tmp/ccFP3aFa.s 			page 13


 510:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 511:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 512:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 513:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 514:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 515:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 516:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 517:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 518:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 519:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 520:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 521:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 522:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 523:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 524:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 525:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 526:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 527:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 528:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 529:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 530:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 531:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 532:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 533:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 534:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 535:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 536:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 537:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 538:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 539:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 540:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 541:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 542:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 543:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 544:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 546:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int posture;
 548:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 549:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 550:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 552:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(posture);
 554:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 555:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 556:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 557:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 558:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 559:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 560:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 561:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 562:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 563:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 564:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 565:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 566:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccFP3aFa.s 			page 14


 567:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 569:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 570:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 571:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 572:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 573:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 575:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 576:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 577:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  67              		.loc 2 578 63 view .LVU14
  68              	.LBB23:
 579:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int int_posture;
  69              		.loc 2 580 1 view .LVU15
 581:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  70              		.loc 2 582 5 view .LVU16
  71              	.LBB24:
  72              	.LBI24:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
  73              		.loc 2 545 63 view .LVU17
  74              	.LBB25:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  75              		.loc 2 547 1 view .LVU18
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  76              		.loc 2 551 5 view .LVU19
  77              		.syntax unified
  78              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  79 0010 EFF31083 		MRS  r3, PRIMASK 
  80              	@ 0 "" 2
  81              	.LVL3:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  82              		.loc 2 553 5 view .LVU20
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  83              		.loc 2 553 5 is_stmt 0 view .LVU21
  84              		.thumb
  85              		.syntax unified
  86              	.LBE25:
  87              	.LBE24:
 583:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 584:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 585:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 586:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  88              		.loc 2 587 5 is_stmt 1 view .LVU22
  89              		.syntax unified
  90              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  91 0014 72B6     		CPSID i
  92              	@ 0 "" 2
 588:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 589:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(int_posture);
  93              		.loc 2 589 5 view .LVU23
  94              	.LVL4:
  95              		.loc 2 589 5 is_stmt 0 view .LVU24
ARM GAS  /tmp/ccFP3aFa.s 			page 15


  96              		.thumb
  97              		.syntax unified
  98              	.LBE23:
  99              	.LBE22:
 111:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 112:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Pickup thread pointer.  */
 113:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     TX_THREAD_GET_CURRENT(thread_ptr)
 100              		.loc 1 113 5 is_stmt 1 view .LVU25
 101 0016 2C4A     		ldr	r2, .L17
 102 0018 1668     		ldr	r6, [r2]
 103              	.LVL5:
 114:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 115:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_BYTE_POOL_ENABLE_PERFORMANCE_INFO
 116:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 117:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Increment the total allocations counter.  */
 118:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     _tx_byte_pool_performance_allocate_count++;
 119:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 120:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Increment the number of allocations on this pool.  */
 121:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     pool_ptr -> tx_byte_pool_performance_allocate_count++;
 122:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 123:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 124:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_ENABLE_EVENT_TRACE
 125:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 126:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* If trace is enabled, save the current event pointer.  */
 127:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     entry_ptr =  _tx_trace_buffer_current_ptr;
 128:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 129:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 130:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_ALLOCATE, pool_ptr, 0, memory_size, wait_option, TX_TRACE
 131:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 132:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Save the time stamp for later comparison to verify that
 133:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****        the event hasn't been overwritten by the time the allocate
 134:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****        call succeeds.  */
 135:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     if (entry_ptr != TX_NULL)
 136:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     {
 137:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 138:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 139:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     }
 140:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 141:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 142:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_ENABLE_EVENT_LOGGING
 143:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     log_entry_ptr =  *(UCHAR **) _tx_el_current_event;
 144:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 145:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Log this kernel call.  */
 146:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     TX_EL_BYTE_ALLOCATE_INSERT
 147:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 148:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Store -1 in the fourth event slot.  */
 149:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) -1;
 150:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 151:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Save the time stamp for later comparison to verify that
 152:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****        the event hasn't been overwritten by the time the allocate
 153:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****        call succeeds.  */
 154:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
 155:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
 156:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 157:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 158:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Set the search finished flag to false.  */
 159:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     finished =  TX_FALSE;
ARM GAS  /tmp/ccFP3aFa.s 			page 16


 104              		.loc 1 159 5 view .LVU26
 105              		.loc 1 159 14 is_stmt 0 view .LVU27
 106 001a 0025     		movs	r5, #0
 107 001c 03E0     		b	.L3
 108              	.LVL6:
 109              	.L15:
 160:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 161:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Loop to handle cases where the owner of the pool changed.  */
 162:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     do
 163:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     {
 164:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 165:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         /* Indicate that this thread is the current owner.  */
 166:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 167:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 168:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         /* Restore interrupts.  */
 169:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         TX_RESTORE
 170:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 171:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         /* At this point, the executing thread owns the pool and can perform a search
 172:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****            for free memory.  */
 173:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 174:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 175:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         /* Optional processing extension.  */
 176:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         TX_BYTE_ALLOCATE_EXTENSION
 177:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 178:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         /* Lockout interrupts.  */
 179:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         TX_DISABLE
 180:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 181:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         /* Determine if we are finished.  */
 182:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         if (work_ptr != TX_NULL)
 183:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         {
 184:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 185:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             /* Yes, we have found a block the search is finished.  */
 186:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             finished =  TX_TRUE;
 187:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         }
 188:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         else
 189:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         {
 190:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 191:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             /* No block was found, does this thread still own the pool?  */
 192:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 110              		.loc 1 192 13 is_stmt 1 view .LVU28
 111              		.loc 1 192 26 is_stmt 0 view .LVU29
 112 001e 226A     		ldr	r2, [r4, #32]
 113              		.loc 1 192 16 view .LVU30
 114 0020 B242     		cmp	r2, r6
 115 0022 0ED0     		beq	.L13
 116              	.LVL7:
 117              	.L2:
 193:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             {
 194:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 195:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Yes, then we have looked through the entire pool and haven't found the memory.  
 196:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 finished =  TX_TRUE;
 197:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             }
 198:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         }
 199:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 200:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     } while (finished == TX_FALSE);
 118              		.loc 1 200 23 is_stmt 1 view .LVU31
 119 0024 7DB9     		cbnz	r5, .L14
ARM GAS  /tmp/ccFP3aFa.s 			page 17


 120              	.LVL8:
 121              	.L3:
 162:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     {
 122              		.loc 1 162 5 view .LVU32
 166:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 123              		.loc 1 166 9 view .LVU33
 166:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 124              		.loc 1 166 40 is_stmt 0 view .LVU34
 125 0026 2662     		str	r6, [r4, #32]
 169:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 126              		.loc 1 169 9 is_stmt 1 view .LVU35
 127              	.LVL9:
 128              	.LBB26:
 129              	.LBI26:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 130              		.loc 2 568 55 view .LVU36
 131              	.LBB27:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 132              		.loc 2 574 5 view .LVU37
 133              		.syntax unified
 134              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 135 0028 83F31088 		MSR  PRIMASK,r3
 136              	@ 0 "" 2
 137              	.LVL10:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 138              		.loc 2 574 5 is_stmt 0 view .LVU38
 139              		.thumb
 140              		.syntax unified
 141              	.LBE27:
 142              	.LBE26:
 173:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 143              		.loc 1 173 9 is_stmt 1 view .LVU39
 173:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 144              		.loc 1 173 21 is_stmt 0 view .LVU40
 145 002c 3946     		mov	r1, r7
 146 002e 2046     		mov	r0, r4
 147 0030 FFF7FEFF 		bl	_tx_byte_pool_search
 148              	.LVL11:
 179:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 149              		.loc 1 179 9 is_stmt 1 view .LVU41
 150              	.LBB28:
 151              	.LBI28:
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 152              		.loc 2 578 63 view .LVU42
 153              	.LBB29:
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 154              		.loc 2 580 1 view .LVU43
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 155              		.loc 2 582 5 view .LVU44
 156              	.LBB30:
 157              	.LBI30:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 158              		.loc 2 545 63 view .LVU45
 159              	.LBB31:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 160              		.loc 2 547 1 view .LVU46
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccFP3aFa.s 			page 18


 161              		.loc 2 551 5 view .LVU47
 162              		.syntax unified
 163              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 164 0034 EFF31083 		MRS  r3, PRIMASK 
 165              	@ 0 "" 2
 166              	.LVL12:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 167              		.loc 2 553 5 view .LVU48
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 168              		.loc 2 553 5 is_stmt 0 view .LVU49
 169              		.thumb
 170              		.syntax unified
 171              	.LBE31:
 172              	.LBE30:
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 173              		.loc 2 587 5 is_stmt 1 view .LVU50
 174              		.syntax unified
 175              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 176 0038 72B6     		CPSID i
 177              	@ 0 "" 2
 178              		.loc 2 589 5 view .LVU51
 179              	.LVL13:
 180              		.loc 2 589 5 is_stmt 0 view .LVU52
 181              		.thumb
 182              		.syntax unified
 183              	.LBE29:
 184              	.LBE28:
 182:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         {
 185              		.loc 1 182 9 is_stmt 1 view .LVU53
 182:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         {
 186              		.loc 1 182 12 is_stmt 0 view .LVU54
 187 003a 0028     		cmp	r0, #0
 188 003c EFD0     		beq	.L15
 186:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         }
 189              		.loc 1 186 22 view .LVU55
 190 003e 0125     		movs	r5, #1
 191              	.LVL14:
 186:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         }
 192              		.loc 1 186 22 view .LVU56
 193 0040 F0E7     		b	.L2
 194              	.LVL15:
 195              	.L13:
 196:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             }
 196              		.loc 1 196 26 view .LVU57
 197 0042 0125     		movs	r5, #1
 198              	.LVL16:
 196:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             }
 199              		.loc 1 196 26 view .LVU58
 200 0044 EEE7     		b	.L2
 201              	.LVL17:
 202              	.L14:
 201:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 202:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Copy the pointer into the return destination.  */
 203:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     *memory_ptr =  (VOID *) work_ptr;
 203              		.loc 1 203 5 is_stmt 1 view .LVU59
 204              		.loc 1 203 17 is_stmt 0 view .LVU60
 205 0046 C8F80000 		str	r0, [r8]
ARM GAS  /tmp/ccFP3aFa.s 			page 19


 204:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 205:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Determine if memory was found.  */
 206:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     if (work_ptr != TX_NULL)
 206              		.loc 1 206 5 is_stmt 1 view .LVU61
 207              		.loc 1 206 8 is_stmt 0 view .LVU62
 208 004a 20B1     		cbz	r0, .L4
 207:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     {
 208:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 209:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_ENABLE_EVENT_TRACE
 210:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 211:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         /* Check that the event time stamp is unchanged.  A different
 212:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****            timestamp means that a later event wrote over the byte
 213:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****            allocate event.  In that case, do nothing here.  */
 214:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         if (entry_ptr != TX_NULL)
 215:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         {
 216:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 217:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             /* Is the timestamp the same?  */
 218:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 219:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             {
 220:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 221:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Timestamp is the same, update the entry with the address.  */
 222:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_MISRA_ENABLE
 223:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 entry_ptr -> tx_trace_buffer_entry_info_2 =  TX_POINTER_TO_ULONG_CONVERT(*memory_pt
 224:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #else
 225:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 entry_ptr -> tx_trace_buffer_entry_information_field_2 =  TX_POINTER_TO_ULONG_CONVE
 226:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 227:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             }
 228:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         }
 229:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 230:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 231:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_ENABLE_EVENT_LOGGING
 232:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         /* Check that the event time stamp is unchanged.  A different
 233:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****            timestamp means that a later event wrote over the byte
 234:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****            allocate event.  In that case, do nothing here.  */
 235:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         if (lower_tbu ==  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET)) &&
 236:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             upper_tbu ==  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET)))
 237:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         {
 238:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             /* Store the address of the allocated fragment.  */
 239:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
 240:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         }
 241:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 242:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 243:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         /* Restore interrupts.  */
 244:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         TX_RESTORE
 209              		.loc 1 244 9 is_stmt 1 view .LVU63
 210              	.LVL18:
 211              	.LBB32:
 212              	.LBI32:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 213              		.loc 2 568 55 view .LVU64
 214              	.LBB33:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 215              		.loc 2 574 5 view .LVU65
 216              		.syntax unified
 217              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 218 004c 83F31088 		MSR  PRIMASK,r3
 219              	@ 0 "" 2
ARM GAS  /tmp/ccFP3aFa.s 			page 20


 220              	.LVL19:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 221              		.loc 2 574 5 is_stmt 0 view .LVU66
 222              		.thumb
 223              		.syntax unified
 224              	.LBE33:
 225              	.LBE32:
 245:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 246:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         /* Set the status to success.  */
 247:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         status =  TX_SUCCESS;
 226              		.loc 1 247 9 is_stmt 1 view .LVU67
 227              		.loc 1 247 16 is_stmt 0 view .LVU68
 228 0050 0020     		movs	r0, #0
 229              	.LVL20:
 230              	.L1:
 248:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     }
 249:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     else
 250:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     {
 251:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 252:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         /* No memory of sufficient size was found...  */
 253:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 254:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         /* Determine if the request specifies suspension.  */
 255:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         if (wait_option != TX_NO_WAIT)
 256:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         {
 257:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 258:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             /* Determine if the preempt disable flag is non-zero.  */
 259:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             if (_tx_thread_preempt_disable != ((UINT) 0))
 260:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             {
 261:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 262:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Suspension is not allowed if the preempt disable flag is non-zero at this point 
 263:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 status =  TX_NO_MEMORY;
 264:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 265:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Restore interrupts.  */
 266:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 TX_RESTORE
 267:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             }
 268:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             else
 269:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             {
 270:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 271:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Prepare for suspension of this thread.  */
 272:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 273:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_BYTE_POOL_ENABLE_PERFORMANCE_INFO
 274:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 275:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Increment the total suspensions counter.  */
 276:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 _tx_byte_pool_performance_suspension_count++;
 277:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 278:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Increment the number of suspensions on this pool.  */
 279:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 pool_ptr -> tx_byte_pool_performance_suspension_count++;
 280:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 281:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 282:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Setup cleanup routine pointer.  */
 283:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 284:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 285:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Setup cleanup information, i.e. this pool control
 286:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                    block.  */
 287:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 288:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 289:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Save the return memory pointer address as well.  */
ARM GAS  /tmp/ccFP3aFa.s 			page 21


 290:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 291:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 292:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Save the byte size requested.  */
 293:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 thread_ptr -> tx_thread_suspend_info =  memory_size;
 294:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 295:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifndef TX_NOT_INTERRUPTABLE
 296:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 297:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Increment the suspension sequence number, which is used to identify
 298:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                    this suspension event.  */
 299:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 thread_ptr -> tx_thread_suspension_sequence++;
 300:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 301:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 302:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Pickup the number of suspended threads.  */
 303:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 304:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 305:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Increment the suspension count.  */
 306:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 (pool_ptr -> tx_byte_pool_suspended_count)++;
 307:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 308:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Setup suspension list.  */
 309:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 if (suspended_count == TX_NO_SUSPENSIONS)
 310:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 {
 311:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 312:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     /* No other threads are suspended.  Setup the head pointer and
 313:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                        just setup this threads pointers to itself.  */
 314:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 315:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 316:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 317:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 }
 318:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 else
 319:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 {
 320:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 321:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     /* This list is not NULL, add current thread to the end. */
 322:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     next_thread =                                   pool_ptr -> tx_byte_pool_suspen
 323:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 324:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
 325:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 326:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 327:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
 328:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 }
 329:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 330:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Set the state to suspended.  */
 331:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 332:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 333:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_NOT_INTERRUPTABLE
 334:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 335:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Call actual non-interruptable thread suspension routine.  */
 336:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 _tx_thread_system_ni_suspend(thread_ptr, wait_option);
 337:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 338:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Restore interrupts.  */
 339:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 TX_RESTORE
 340:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #else
 341:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 342:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Set the suspending flag.  */
 343:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 thread_ptr -> tx_thread_suspending =  TX_TRUE;
 344:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 345:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Setup the timeout period.  */
 346:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
ARM GAS  /tmp/ccFP3aFa.s 			page 22


 347:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 348:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Temporarily disable preemption.  */
 349:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 _tx_thread_preempt_disable++;
 350:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 351:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Restore interrupts.  */
 352:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 TX_RESTORE
 353:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 354:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Call actual thread suspension routine.  */
 355:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 _tx_thread_system_suspend(thread_ptr);
 356:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 357:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 358:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_ENABLE_EVENT_TRACE
 359:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 360:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Check that the event time stamp is unchanged.  A different
 361:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                    timestamp means that a later event wrote over the byte
 362:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                    allocate event.  In that case, do nothing here.  */
 363:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 if (entry_ptr != TX_NULL)
 364:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 {
 365:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 366:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     /* Is the timestamp the same?  */
 367:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 368:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     {
 369:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 370:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                         /* Timestamp is the same, update the entry with the address.  */
 371:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_MISRA_ENABLE
 372:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                         entry_ptr -> tx_trace_buffer_entry_info_2 =  TX_POINTER_TO_ULONG_CONVERT(*m
 373:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #else
 374:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                        entry_ptr -> tx_trace_buffer_entry_information_field_2 =  TX_POINTER_TO_ULON
 375:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 376:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     }
 377:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 }
 378:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 379:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 380:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #ifdef TX_ENABLE_EVENT_LOGGING
 381:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Check that the event time stamp is unchanged.  A different
 382:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                    timestamp means that a later event wrote over the byte
 383:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                    allocate event.  In that case, do nothing here.  */
 384:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 if (lower_tbu ==  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET)) &&
 385:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     upper_tbu ==  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET)))
 386:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 {
 387:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 388:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     /* Store the address of the allocated fragment.  */
 389:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr
 390:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 }
 391:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 392:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 393:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 /* Return the completion status.  */
 394:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 status =  thread_ptr -> tx_thread_suspend_status;
 395:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             }
 396:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         }
 397:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         else
 398:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         {
 399:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 400:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             /* Restore interrupts.  */
 401:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             TX_RESTORE
 402:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 403:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             /* Immediate return, return error completion.  */
ARM GAS  /tmp/ccFP3aFa.s 			page 23


 404:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             status =  TX_NO_MEMORY;
 405:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         }
 406:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     }
 407:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 408:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     /* Return completion status.  */
 409:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****     return(status);
 410:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** }
 231              		.loc 1 410 1 view .LVU69
 232 0052 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 233              	.LVL21:
 234              	.L4:
 255:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         {
 235              		.loc 1 255 9 is_stmt 1 view .LVU70
 255:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         {
 236              		.loc 1 255 12 is_stmt 0 view .LVU71
 237 0056 B9F1000F 		cmp	r9, #0
 238 005a 31D0     		beq	.L6
 259:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             {
 239              		.loc 1 259 13 is_stmt 1 view .LVU72
 259:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             {
 240              		.loc 1 259 44 is_stmt 0 view .LVU73
 241 005c 1B4A     		ldr	r2, .L17+4
 242 005e 1268     		ldr	r2, [r2]
 259:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             {
 243              		.loc 1 259 16 view .LVU74
 244 0060 1ABB     		cbnz	r2, .L16
 283:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 245              		.loc 1 283 17 is_stmt 1 view .LVU75
 283:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 246              		.loc 1 283 57 is_stmt 0 view .LVU76
 247 0062 1B4A     		ldr	r2, .L17+8
 248 0064 B266     		str	r2, [r6, #104]
 287:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 249              		.loc 1 287 17 is_stmt 1 view .LVU77
 287:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 250              		.loc 1 287 63 is_stmt 0 view .LVU78
 251 0066 F466     		str	r4, [r6, #108]
 290:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 252              		.loc 1 290 17 is_stmt 1 view .LVU79
 290:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 253              		.loc 1 290 65 is_stmt 0 view .LVU80
 254 0068 C6F87C80 		str	r8, [r6, #124]
 293:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 255              		.loc 1 293 17 is_stmt 1 view .LVU81
 293:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 256              		.loc 1 293 54 is_stmt 0 view .LVU82
 257 006c B767     		str	r7, [r6, #120]
 299:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 258              		.loc 1 299 17 is_stmt 1 view .LVU83
 299:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 259              		.loc 1 299 28 is_stmt 0 view .LVU84
 260 006e D6F8AC20 		ldr	r2, [r6, #172]
 299:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 261              		.loc 1 299 60 view .LVU85
 262 0072 0132     		adds	r2, r2, #1
 263 0074 C6F8AC20 		str	r2, [r6, #172]
 303:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
ARM GAS  /tmp/ccFP3aFa.s 			page 24


 264              		.loc 1 303 17 is_stmt 1 view .LVU86
 303:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 265              		.loc 1 303 33 is_stmt 0 view .LVU87
 266 0078 A26A     		ldr	r2, [r4, #40]
 267              	.LVL22:
 306:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 268              		.loc 1 306 17 is_stmt 1 view .LVU88
 306:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 269              		.loc 1 306 59 is_stmt 0 view .LVU89
 270 007a 511C     		adds	r1, r2, #1
 271 007c A162     		str	r1, [r4, #40]
 309:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 {
 272              		.loc 1 309 17 is_stmt 1 view .LVU90
 309:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 {
 273              		.loc 1 309 20 is_stmt 0 view .LVU91
 274 007e C2B9     		cbnz	r2, .L8
 314:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 275              		.loc 1 314 21 is_stmt 1 view .LVU92
 314:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 276              		.loc 1 314 62 is_stmt 0 view .LVU93
 277 0080 6662     		str	r6, [r4, #36]
 315:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 278              		.loc 1 315 21 is_stmt 1 view .LVU94
 315:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 279              		.loc 1 315 60 is_stmt 0 view .LVU95
 280 0082 3667     		str	r6, [r6, #112]
 316:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 }
 281              		.loc 1 316 21 is_stmt 1 view .LVU96
 316:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 }
 282              		.loc 1 316 64 is_stmt 0 view .LVU97
 283 0084 7667     		str	r6, [r6, #116]
 284              	.LVL23:
 285              	.L9:
 331:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 286              		.loc 1 331 17 is_stmt 1 view .LVU98
 331:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 287              		.loc 1 331 47 is_stmt 0 view .LVU99
 288 0086 0922     		movs	r2, #9
 289 0088 3263     		str	r2, [r6, #48]
 343:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 290              		.loc 1 343 17 is_stmt 1 view .LVU100
 343:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 291              		.loc 1 343 52 is_stmt 0 view .LVU101
 292 008a 0122     		movs	r2, #1
 293 008c B263     		str	r2, [r6, #56]
 346:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 294              		.loc 1 346 17 is_stmt 1 view .LVU102
 346:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 295              		.loc 1 346 81 is_stmt 0 view .LVU103
 296 008e C6F84C90 		str	r9, [r6, #76]
 349:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 297              		.loc 1 349 17 is_stmt 1 view .LVU104
 349:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 298              		.loc 1 349 43 is_stmt 0 view .LVU105
 299 0092 0E49     		ldr	r1, .L17+4
 300 0094 0A68     		ldr	r2, [r1]
 301 0096 0132     		adds	r2, r2, #1
ARM GAS  /tmp/ccFP3aFa.s 			page 25


 302 0098 0A60     		str	r2, [r1]
 352:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 303              		.loc 1 352 17 is_stmt 1 view .LVU106
 304              	.LVL24:
 305              	.LBB34:
 306              	.LBI34:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 307              		.loc 2 568 55 view .LVU107
 308              	.LBB35:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 309              		.loc 2 574 5 view .LVU108
 310              		.syntax unified
 311              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 312 009a 83F31088 		MSR  PRIMASK,r3
 313              	@ 0 "" 2
 314              	.LVL25:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 315              		.loc 2 574 5 is_stmt 0 view .LVU109
 316              		.thumb
 317              		.syntax unified
 318              	.LBE35:
 319              	.LBE34:
 355:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 320              		.loc 1 355 17 is_stmt 1 view .LVU110
 321 009e 3046     		mov	r0, r6
 322              	.LVL26:
 355:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** #endif
 323              		.loc 1 355 17 is_stmt 0 view .LVU111
 324 00a0 FFF7FEFF 		bl	_tx_thread_system_suspend
 325              	.LVL27:
 394:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             }
 326              		.loc 1 394 17 is_stmt 1 view .LVU112
 394:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             }
 327              		.loc 1 394 24 is_stmt 0 view .LVU113
 328 00a4 D6F88400 		ldr	r0, [r6, #132]
 329              	.LVL28:
 394:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             }
 330              		.loc 1 394 24 view .LVU114
 331 00a8 D3E7     		b	.L1
 332              	.LVL29:
 333              	.L16:
 263:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 334              		.loc 1 263 17 is_stmt 1 view .LVU115
 266:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****             }
 335              		.loc 1 266 17 view .LVU116
 336              	.LBB36:
 337              	.LBI36:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 338              		.loc 2 568 55 view .LVU117
 339              	.LBB37:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 340              		.loc 2 574 5 view .LVU118
 341              		.syntax unified
 342              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 343 00aa 83F31088 		MSR  PRIMASK,r3
 344              	@ 0 "" 2
 345              	.LVL30:
ARM GAS  /tmp/ccFP3aFa.s 			page 26


 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 346              		.loc 2 574 5 is_stmt 0 view .LVU119
 347              		.thumb
 348              		.syntax unified
 349              	.LBE37:
 350              	.LBE36:
 263:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
 351              		.loc 1 263 24 view .LVU120
 352 00ae 1020     		movs	r0, #16
 353              	.LVL31:
 354              	.LBB39:
 355              	.LBB38:
 576:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 356              		.loc 2 576 1 view .LVU121
 357 00b0 CFE7     		b	.L1
 358              	.LVL32:
 359              	.L8:
 576:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 360              		.loc 2 576 1 view .LVU122
 361              	.LBE38:
 362              	.LBE39:
 322:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 363              		.loc 1 322 21 is_stmt 1 view .LVU123
 322:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 364              		.loc 1 322 33 is_stmt 0 view .LVU124
 365 00b2 626A     		ldr	r2, [r4, #36]
 366              	.LVL33:
 323:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
 367              		.loc 1 323 21 is_stmt 1 view .LVU125
 323:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
 368              		.loc 1 323 60 is_stmt 0 view .LVU126
 369 00b4 3267     		str	r2, [r6, #112]
 324:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 370              		.loc 1 324 21 is_stmt 1 view .LVU127
 324:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 371              		.loc 1 324 37 is_stmt 0 view .LVU128
 372 00b6 516F     		ldr	r1, [r2, #116]
 373              	.LVL34:
 325:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 374              		.loc 1 325 21 is_stmt 1 view .LVU129
 325:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 375              		.loc 1 325 64 is_stmt 0 view .LVU130
 376 00b8 7167     		str	r1, [r6, #116]
 326:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
 377              		.loc 1 326 21 is_stmt 1 view .LVU131
 326:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
 378              		.loc 1 326 65 is_stmt 0 view .LVU132
 379 00ba 0E67     		str	r6, [r1, #112]
 327:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 }
 380              		.loc 1 327 21 is_stmt 1 view .LVU133
 327:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****                 }
 381              		.loc 1 327 65 is_stmt 0 view .LVU134
 382 00bc 5667     		str	r6, [r2, #116]
 383 00be E2E7     		b	.L9
 384              	.LVL35:
 385              	.L6:
 401:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** 
ARM GAS  /tmp/ccFP3aFa.s 			page 27


 386              		.loc 1 401 13 is_stmt 1 view .LVU135
 387              	.LBB40:
 388              	.LBI40:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 389              		.loc 2 568 55 view .LVU136
 390              	.LBB41:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 391              		.loc 2 574 5 view .LVU137
 392              		.syntax unified
 393              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 394 00c0 83F31088 		MSR  PRIMASK,r3
 395              	@ 0 "" 2
 396              	.LVL36:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 397              		.loc 2 574 5 is_stmt 0 view .LVU138
 398              		.thumb
 399              		.syntax unified
 400              	.LBE41:
 401              	.LBE40:
 404:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         }
 402              		.loc 1 404 13 is_stmt 1 view .LVU139
 404:Middlewares/ST/threadx/common/src/tx_byte_allocate.c ****         }
 403              		.loc 1 404 20 is_stmt 0 view .LVU140
 404 00c4 1020     		movs	r0, #16
 405              	.LVL37:
 409:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** }
 406              		.loc 1 409 5 is_stmt 1 view .LVU141
 409:Middlewares/ST/threadx/common/src/tx_byte_allocate.c **** }
 407              		.loc 1 409 11 is_stmt 0 view .LVU142
 408 00c6 C4E7     		b	.L1
 409              	.L18:
 410              		.align	2
 411              	.L17:
 412 00c8 00000000 		.word	_tx_thread_current_ptr
 413 00cc 00000000 		.word	_tx_thread_preempt_disable
 414 00d0 00000000 		.word	_tx_byte_pool_cleanup
 415              		.cfi_endproc
 416              	.LFE8:
 418              		.text
 419              	.Letext0:
 420              		.file 3 "Middlewares/ST/threadx/common/inc/tx_api.h"
 421              		.file 4 "Middlewares/ST/threadx/common/inc/tx_thread.h"
 422              		.file 5 "Middlewares/ST/threadx/common/inc/tx_byte_pool.h"
ARM GAS  /tmp/ccFP3aFa.s 			page 28


DEFINED SYMBOLS
                            *ABS*:00000000 tx_byte_allocate.c
     /tmp/ccFP3aFa.s:20     .text._tx_byte_allocate:00000000 $t
     /tmp/ccFP3aFa.s:26     .text._tx_byte_allocate:00000000 _tx_byte_allocate
     /tmp/ccFP3aFa.s:412    .text._tx_byte_allocate:000000c8 $d

UNDEFINED SYMBOLS
_tx_byte_pool_search
_tx_thread_system_suspend
_tx_thread_current_ptr
_tx_thread_preempt_disable
_tx_byte_pool_cleanup
