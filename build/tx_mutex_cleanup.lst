ARM GAS  /tmp/ccNDC9PJ.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"tx_mutex_cleanup.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c"
  19              		.section	.text._tx_mutex_cleanup,"ax",%progbits
  20              		.align	1
  21              		.global	_tx_mutex_cleanup
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_tx_mutex_cleanup:
  27              	.LVL0:
  28              	.LFB8:
   1:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**************************************************************************/
   2:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
   3:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
   5:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  10:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**************************************************************************/
  11:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  12:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  13:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**************************************************************************/
  14:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**************************************************************************/
  15:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**                                                                       */
  16:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**                                                                       */
  18:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**   Mutex                                                               */
  19:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**                                                                       */
  20:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**************************************************************************/
  21:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**************************************************************************/
  22:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  23:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #define TX_SOURCE_CODE
  24:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  25:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  26:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /* Include necessary system files.  */
  27:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  28:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #include "tx_api.h"
  29:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #include "tx_thread.h"
  30:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #include "tx_mutex.h"
ARM GAS  /tmp/ccNDC9PJ.s 			page 2


  31:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  32:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  33:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**************************************************************************/
  34:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  35:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  FUNCTION                                               RELEASE        */
  36:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  37:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    _tx_mutex_cleanup                                   PORTABLE C      */
  38:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                           6.1          */
  39:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  AUTHOR                                                                */
  40:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  41:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    William E. Lamie, Microsoft Corporation                             */
  42:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  43:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  DESCRIPTION                                                           */
  44:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  45:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    This function processes mutex timeout and thread terminate          */
  46:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    actions that require the mutex data structures to be cleaned        */
  47:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    up.                                                                 */
  48:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  49:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  INPUT                                                                 */
  50:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  51:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    thread_ptr                        Pointer to suspended thread's     */
  52:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                        control block                   */
  53:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  54:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  OUTPUT                                                                */
  55:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  56:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    None                                                                */
  57:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  58:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  CALLS                                                                 */
  59:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  60:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    _tx_thread_system_resume          Resume thread service             */
  61:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    _tx_thread_system_ni_resume       Non-interruptable resume thread   */
  62:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  63:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  CALLED BY                                                             */
  64:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  65:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    _tx_thread_timeout                Thread timeout processing         */
  66:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    _tx_thread_terminate              Thread terminate processing       */
  67:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    _tx_thread_wait_abort             Thread wait abort processing      */
  68:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  69:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  RELEASE HISTORY                                                       */
  70:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  71:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    DATE              NAME                      DESCRIPTION             */
  72:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  73:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  74:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  75:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                            resulting in version 6.1    */
  76:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
  77:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**************************************************************************/
  78:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
  79:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** {
  29              		.loc 1 79 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 79 1 is_stmt 0 view .LVU1
  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccNDC9PJ.s 			page 3


  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  80:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  81:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #ifndef TX_NOT_INTERRUPTABLE
  82:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** TX_INTERRUPT_SAVE_AREA
  39              		.loc 1 82 1 is_stmt 1 view .LVU2
  83:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #endif
  84:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  85:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** TX_MUTEX            *mutex_ptr;
  40              		.loc 1 85 1 view .LVU3
  86:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** UINT                suspended_count;
  41              		.loc 1 86 1 view .LVU4
  87:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** TX_THREAD           *next_thread;
  42              		.loc 1 87 1 view .LVU5
  88:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** TX_THREAD           *previous_thread;
  43              		.loc 1 88 1 view .LVU6
  89:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  90:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  91:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #ifndef TX_NOT_INTERRUPTABLE
  92:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  93:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     /* Disable interrupts to remove the suspended thread from the mutex.  */
  94:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     TX_DISABLE
  44              		.loc 1 94 5 view .LVU7
  45              	.LBB28:
  46              	.LBI28:
  47              		.file 2 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h"
   1:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
   2:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   3:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   5:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  10:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  11:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  12:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  13:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  14:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  15:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  16:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  18:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  20:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  21:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  22:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  23:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  24:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  25:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  26:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  28:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M7/GNU     */
  29:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                           6.1.12       */
  30:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  31:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
ARM GAS  /tmp/ccNDC9PJ.s 			page 4


  32:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  33:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  35:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  37:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  46:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  49:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  51:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  53:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  04-25-2022      Scott Larson            Modified comments and added   */
  60:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            volatile to registers,      */
  61:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.11 */
  62:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  07-29-2022      Scott Larson            Modified comments and         */
  63:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            described BASEPRI usage,    */
  64:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.12 */
  65:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  66:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  67:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  68:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  69:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_H
  70:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  71:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  72:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  73:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  74:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  75:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  76:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  77:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  78:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  79:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_user.h"
  80:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  81:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  82:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  83:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  84:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  85:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <stdlib.h>
  86:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <string.h>
  87:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  88:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__
ARM GAS  /tmp/ccNDC9PJ.s 			page 5


  89:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  90:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  91:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  92:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <yvals.h>
  93:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  94:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  95:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  96:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
  97:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  98:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  99:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 100:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 101:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 102:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
 103:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
 104:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
 105:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 106:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 107:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef __GNUC__
 108:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 109:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 110:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 111:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 112:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 113:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define VOID                                    void
 114:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 115:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 116:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef int                                     INT;
 117:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 118:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef long                                    LONG;
 119:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 120:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 121:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 122:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 123:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 124:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 125:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 126:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 127:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 128:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 129:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 130:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 131:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 132:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 133:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 134:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 135:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 136:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 137:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 138:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 139:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 140:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 141:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 142:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 143:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 144:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 145:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
ARM GAS  /tmp/ccNDC9PJ.s 			page 6


 146:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 147:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 148:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 149:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 150:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 151:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 152:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* By default, ThreadX for Cortex-M uses the PRIMASK register to enable/disable interrupts.
 153:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** If using BASEPRI is desired, define the following two symbols for both c and assembly files:
 154:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_USE_BASEPRI - This tells ThreadX to use BASEPRI instead of PRIMASK.
 155:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_BASEPRI = (priority_mask << (8 - number_priority_bits)) - this defines the maximum priority
 156:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** Any interrupt with a higher priority than priority_mask will not be masked, thus the interrupt will
 157:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 158:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 159:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 160:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 161:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 162:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 163:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 164:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 165:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 166:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 167:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    source constants would be:
 168:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 169:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0x0a800024)
 170:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 171:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 172:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 173:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 174:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 175:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 176:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0xE0001004)
 177:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 178:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 179:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 180:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 181:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 182:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 183:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 184:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 185:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 186:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 187:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
 188:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 189:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 190:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 191:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 192:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 193:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 194:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 195:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 196:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 197:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 198:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 199:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 200:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 201:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 202:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
ARM GAS  /tmp/ccNDC9PJ.s 			page 7


 203:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 204:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 205:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 206:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 207:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 208:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 209:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 210:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    a function call.  */
 211:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 212:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 213:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 214:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 215:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 216:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 217:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 218:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 219:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 220:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 221:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 222:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 223:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    logic.  */
 224:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 225:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 226:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 227:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 228:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 229:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 230:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 231:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 232:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 233:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 234:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 235:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 236:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 237:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 238:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 239:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 240:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 241:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 242:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 243:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 244:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 245:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 246:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 247:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 248:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 249:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 250:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 251:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 252:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 253:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 254:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 255:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 256:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 257:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 258:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 259:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
ARM GAS  /tmp/ccNDC9PJ.s 			page 8


 260:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 261:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 262:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 263:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 264:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 265:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 266:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 267:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 268:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 269:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 270:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 271:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 272:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 273:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 274:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 275:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 276:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 277:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 278:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 279:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 280:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 281:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 282:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 283:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 284:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 285:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 286:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 287:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 288:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 289:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 290:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 291:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 292:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 293:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 294:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 295:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 296:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 297:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 298:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 299:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 300:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 301:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 302:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 303:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 304:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 305:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 306:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 307:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 308:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 309:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 310:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 311:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 312:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 313:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 314:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 315:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 316:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
ARM GAS  /tmp/ccNDC9PJ.s 			page 9


 317:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 318:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 319:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 320:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 321:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 322:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 323:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 324:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 325:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 326:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 327:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 328:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 329:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 330:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 331:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 332:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 333:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 334:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 335:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 336:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 337:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 338:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 339:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 340:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 341:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 342:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 343:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 344:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 345:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 346:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 347:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 348:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 349:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 350:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 351:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 352:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 353:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 354:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 355:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 356:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 357:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 358:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 359:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 360:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 361:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 362:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 363:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 364:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 365:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 366:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 367:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 368:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 369:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 370:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 371:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 372:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 373:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
ARM GAS  /tmp/ccNDC9PJ.s 			page 10


 374:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 375:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 376:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 377:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 378:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 379:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 380:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 381:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 382:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 383:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 384:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 385:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 386:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 387:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 388:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 389:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 390:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 391:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 392:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 393:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((volatile ULONG *) 0xE00
 394:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 395:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 396:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 397:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 398:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 399:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 400:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 401:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 402:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 403:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 404:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 405:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 406:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 407:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 408:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 409:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 410:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 411:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 412:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 413:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 414:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 415:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 416:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 417:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 418:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 419:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 420:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 421:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 422:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 423:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 424:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 425:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 426:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 427:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 428:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 429:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 430:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
ARM GAS  /tmp/ccNDC9PJ.s 			page 11


 431:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 432:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 433:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 434:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 435:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 436:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 437:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 438:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 439:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 440:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 441:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 442:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 443:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 444:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 445:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 446:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 447:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 448:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 449:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 450:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 451:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 452:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 453:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 454:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 455:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 456:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 457:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 458:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 459:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 460:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 461:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 462:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 463:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 464:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 465:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 466:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 467:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 468:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 469:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 470:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 471:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 472:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 473:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 474:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 475:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 476:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 477:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 478:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 479:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 480:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 481:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 482:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 483:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 484:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 485:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 486:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 487:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
ARM GAS  /tmp/ccNDC9PJ.s 			page 12


 488:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 489:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 490:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(ipsr_value);
 491:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 492:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 493:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 494:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 495:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 496:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 497:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 498:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 499:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 500:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 501:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 502:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 503:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 504:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 505:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 506:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 507:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 508:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 509:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 510:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 511:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 512:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 513:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 514:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 515:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 516:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 517:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 518:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 519:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 520:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 521:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 522:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 523:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 524:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 525:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 526:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 527:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 528:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 529:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 530:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 531:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 532:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 533:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 534:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 535:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 536:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 537:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 538:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 539:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 540:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 541:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 542:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 543:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 544:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccNDC9PJ.s 			page 13


 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 546:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int posture;
 548:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 549:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 550:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 552:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(posture);
 554:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 555:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 556:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 557:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 558:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 559:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 560:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 561:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 562:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 563:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 564:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 565:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 566:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 567:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 569:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 570:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 571:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 572:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 573:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 575:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 576:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 577:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  48              		.loc 2 578 63 view .LVU8
  49              	.LBB29:
 579:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int int_posture;
  50              		.loc 2 580 1 view .LVU9
 581:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  51              		.loc 2 582 5 view .LVU10
  52              	.LBB30:
  53              	.LBI30:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
  54              		.loc 2 545 63 view .LVU11
  55              	.LBB31:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  56              		.loc 2 547 1 view .LVU12
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  57              		.loc 2 551 5 view .LVU13
  58              		.syntax unified
  59              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  60 0002 EFF31083 		MRS  r3, PRIMASK 
  61              	@ 0 "" 2
  62              	.LVL1:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
ARM GAS  /tmp/ccNDC9PJ.s 			page 14


  63              		.loc 2 553 5 view .LVU14
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  64              		.loc 2 553 5 is_stmt 0 view .LVU15
  65              		.thumb
  66              		.syntax unified
  67              	.LBE31:
  68              	.LBE30:
 583:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 584:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 585:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 586:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  69              		.loc 2 587 5 is_stmt 1 view .LVU16
  70              		.syntax unified
  71              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  72 0006 72B6     		CPSID i
  73              	@ 0 "" 2
 588:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 589:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(int_posture);
  74              		.loc 2 589 5 view .LVU17
  75              	.LVL2:
  76              		.loc 2 589 5 is_stmt 0 view .LVU18
  77              		.thumb
  78              		.syntax unified
  79              	.LBE29:
  80              	.LBE28:
  95:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
  96:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     /* Determine if the cleanup is still required.  */
  97:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
  81              		.loc 1 97 5 is_stmt 1 view .LVU19
  82              		.loc 1 97 8 is_stmt 0 view .LVU20
  83 0008 1B4A     		ldr	r2, .L7
  84 000a 846E     		ldr	r4, [r0, #104]
  85 000c 9442     		cmp	r4, r2
  86 000e 02D0     		beq	.L6
  87              	.LVL3:
  88              	.L2:
  98:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     {
  99:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 100:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         /* Check for valid suspension sequence.  */
 101:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 102:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         {
 103:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 104:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             /* Setup pointer to mutex control block.  */
 105:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_b
 106:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 107:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             /* Check for NULL mutex pointer.  */
 108:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             if (mutex_ptr != TX_NULL)
 109:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             {
 110:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 111:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                 /* Determine if the mutex ID is valid.  */
 112:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                 if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 113:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                 {
 114:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 115:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                     /* Determine if there are any thread suspensions.  */
 116:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                     if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 117:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                     {
ARM GAS  /tmp/ccNDC9PJ.s 			page 15


 118:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #else
 119:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 120:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         /* Setup pointer to mutex control block.  */
 121:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspe
 122:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #endif
 123:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 124:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         /* Yes, we still have thread suspension!  */
 125:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 126:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         /* Clear the suspension cleanup flag.  */
 127:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 128:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 129:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         /* Decrement the suspension count.  */
 130:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         mutex_ptr -> tx_mutex_suspended_count--;
 131:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 132:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         /* Pickup the suspended count.  */
 133:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 134:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 135:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         /* Remove the suspended thread from the list.  */
 136:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 137:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         /* See if this is the only suspended thread on the list.  */
 138:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         if (suspended_count == TX_NO_SUSPENSIONS)
 139:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         {
 140:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 141:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Yes, the only suspended thread.  */
 142:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 143:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Update the head pointer.  */
 144:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 145:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         }
 146:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         else
 147:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         {
 148:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 149:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* At least one more thread is on the same suspension list.  */
 150:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 151:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Update the links of the adjacent threads.  */
 152:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             next_thread =                                   thread_ptr -> tx_thread
 153:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             previous_thread =                               thread_ptr -> tx_thread
 154:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             next_thread -> tx_thread_suspended_previous =   previous_thread;
 155:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             previous_thread -> tx_thread_suspended_next =   next_thread;
 156:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 157:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Determine if we need to update the head pointer.  */
 158:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 159:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             {
 160:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 161:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                                 /* Update the list head pointer.  */
 162:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                                 mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 163:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             }
 164:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         }
 165:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 166:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         /* Now we need to determine if this cleanup is from a terminate, timeout,
 167:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                            or from a wait abort.  */
 168:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 169:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         {
 170:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 171:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Timeout condition and the thread still suspended on the mutex.
 172:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                                Setup return error status and resume the thread.  */
 173:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 174:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #ifdef TX_MUTEX_ENABLE_PERFORMANCE_INFO
ARM GAS  /tmp/ccNDC9PJ.s 			page 16


 175:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 176:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Increment the total timeouts counter.  */
 177:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             _tx_mutex_performance_timeout_count++;
 178:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 179:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Increment the number of timeouts on this semaphore.  */
 180:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             mutex_ptr -> tx_mutex_performance_timeout_count++;
 181:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #endif
 182:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 183:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Setup return status.  */
 184:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 185:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 186:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #ifdef TX_NOT_INTERRUPTABLE
 187:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 188:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Resume the thread!  */
 189:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             _tx_thread_system_ni_resume(thread_ptr);
 190:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #else
 191:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 192:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Temporarily disable preemption.  */
 193:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             _tx_thread_preempt_disable++;
 194:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 195:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Restore interrupts.  */
 196:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             TX_RESTORE
 197:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 198:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Resume the thread!  */
 199:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             _tx_thread_system_resume(thread_ptr);
 200:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 201:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             /* Disable interrupts.  */
 202:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             TX_DISABLE
 203:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #endif
 204:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         }
 205:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #ifndef TX_NOT_INTERRUPTABLE
 206:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                     }
 207:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                 }
 208:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             }
 209:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         }
 210:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     }
 211:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 212:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     /* Restore interrupts.  */
 213:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     TX_RESTORE
  89              		.loc 1 213 5 is_stmt 1 view .LVU21
  90              	.LBB32:
  91              	.LBI32:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
  92              		.loc 2 568 55 view .LVU22
  93              	.LBB33:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  94              		.loc 2 574 5 view .LVU23
  95              		.syntax unified
  96              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  97 0010 83F31088 		MSR  PRIMASK,r3
  98              	@ 0 "" 2
  99              	.LVL4:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 100              		.loc 2 574 5 is_stmt 0 view .LVU24
 101              		.thumb
 102              		.syntax unified
 103              	.LBE33:
ARM GAS  /tmp/ccNDC9PJ.s 			page 17


 104              	.LBE32:
 214:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #endif
 215:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** }
 105              		.loc 1 215 1 view .LVU25
 106 0014 10BD     		pop	{r4, pc}
 107              	.LVL5:
 108              	.L6:
 101:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         {
 109              		.loc 1 101 9 is_stmt 1 view .LVU26
 101:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         {
 110              		.loc 1 101 47 is_stmt 0 view .LVU27
 111 0016 D0F8AC20 		ldr	r2, [r0, #172]
 101:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         {
 112              		.loc 1 101 12 view .LVU28
 113 001a 8A42     		cmp	r2, r1
 114 001c F8D1     		bne	.L2
 105:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 115              		.loc 1 105 13 is_stmt 1 view .LVU29
 105:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 116              		.loc 1 105 23 is_stmt 0 view .LVU30
 117 001e C26E     		ldr	r2, [r0, #108]
 118              	.LVL6:
 108:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             {
 119              		.loc 1 108 13 is_stmt 1 view .LVU31
 108:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             {
 120              		.loc 1 108 16 is_stmt 0 view .LVU32
 121 0020 002A     		cmp	r2, #0
 122 0022 F5D0     		beq	.L2
 112:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                 {
 123              		.loc 1 112 17 is_stmt 1 view .LVU33
 112:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                 {
 124              		.loc 1 112 20 is_stmt 0 view .LVU34
 125 0024 1549     		ldr	r1, .L7+4
 126              	.LVL7:
 112:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                 {
 127              		.loc 1 112 20 view .LVU35
 128 0026 1468     		ldr	r4, [r2]
 129 0028 8C42     		cmp	r4, r1
 130 002a F1D1     		bne	.L2
 116:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                     {
 131              		.loc 1 116 21 is_stmt 1 view .LVU36
 116:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                     {
 132              		.loc 1 116 35 is_stmt 0 view .LVU37
 133 002c D169     		ldr	r1, [r2, #28]
 116:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                     {
 134              		.loc 1 116 24 view .LVU38
 135 002e 0029     		cmp	r1, #0
 136 0030 EED0     		beq	.L2
 127:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 137              		.loc 1 127 25 is_stmt 1 view .LVU39
 127:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 138              		.loc 1 127 65 is_stmt 0 view .LVU40
 139 0032 0021     		movs	r1, #0
 140 0034 8166     		str	r1, [r0, #104]
 130:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 141              		.loc 1 130 25 is_stmt 1 view .LVU41
 130:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
ARM GAS  /tmp/ccNDC9PJ.s 			page 18


 142              		.loc 1 130 35 is_stmt 0 view .LVU42
 143 0036 D169     		ldr	r1, [r2, #28]
 130:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 144              		.loc 1 130 62 view .LVU43
 145 0038 0139     		subs	r1, r1, #1
 146 003a D161     		str	r1, [r2, #28]
 133:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 147              		.loc 1 133 25 is_stmt 1 view .LVU44
 148              	.LVL8:
 138:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         {
 149              		.loc 1 138 25 view .LVU45
 138:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         {
 150              		.loc 1 138 28 is_stmt 0 view .LVU46
 151 003c 91B9     		cbnz	r1, .L3
 144:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         }
 152              		.loc 1 144 29 is_stmt 1 view .LVU47
 144:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         }
 153              		.loc 1 144 67 is_stmt 0 view .LVU48
 154 003e 9161     		str	r1, [r2, #24]
 155              	.LVL9:
 156              	.L4:
 168:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         {
 157              		.loc 1 168 25 is_stmt 1 view .LVU49
 168:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         {
 158              		.loc 1 168 40 is_stmt 0 view .LVU50
 159 0040 026B     		ldr	r2, [r0, #48]
 160              	.LVL10:
 168:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                         {
 161              		.loc 1 168 28 view .LVU51
 162 0042 0D2A     		cmp	r2, #13
 163 0044 E4D1     		bne	.L2
 184:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 164              		.loc 1 184 29 is_stmt 1 view .LVU52
 184:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 165              		.loc 1 184 68 is_stmt 0 view .LVU53
 166 0046 1D22     		movs	r2, #29
 167 0048 C0F88420 		str	r2, [r0, #132]
 193:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 168              		.loc 1 193 29 is_stmt 1 view .LVU54
 193:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 169              		.loc 1 193 55 is_stmt 0 view .LVU55
 170 004c 0C49     		ldr	r1, .L7+8
 171 004e 0A68     		ldr	r2, [r1]
 172 0050 0132     		adds	r2, r2, #1
 173 0052 0A60     		str	r2, [r1]
 196:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 174              		.loc 1 196 29 is_stmt 1 view .LVU56
 175              	.LVL11:
 176              	.LBB34:
 177              	.LBI34:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 178              		.loc 2 568 55 view .LVU57
 179              	.LBB35:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 180              		.loc 2 574 5 view .LVU58
 181              		.syntax unified
 182              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
ARM GAS  /tmp/ccNDC9PJ.s 			page 19


 183 0054 83F31088 		MSR  PRIMASK,r3
 184              	@ 0 "" 2
 185              	.LVL12:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 186              		.loc 2 574 5 is_stmt 0 view .LVU59
 187              		.thumb
 188              		.syntax unified
 189              	.LBE35:
 190              	.LBE34:
 199:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 191              		.loc 1 199 29 is_stmt 1 view .LVU60
 192 0058 FFF7FEFF 		bl	_tx_thread_system_resume
 193              	.LVL13:
 202:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #endif
 194              		.loc 1 202 29 view .LVU61
 195              	.LBB36:
 196              	.LBI36:
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 197              		.loc 2 578 63 view .LVU62
 198              	.LBB37:
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 199              		.loc 2 580 1 view .LVU63
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 200              		.loc 2 582 5 view .LVU64
 201              	.LBB38:
 202              	.LBI38:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 203              		.loc 2 545 63 view .LVU65
 204              	.LBB39:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 205              		.loc 2 547 1 view .LVU66
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 206              		.loc 2 551 5 view .LVU67
 207              		.syntax unified
 208              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 209 005c EFF31083 		MRS  r3, PRIMASK 
 210              	@ 0 "" 2
 211              	.LVL14:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 212              		.loc 2 553 5 view .LVU68
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 213              		.loc 2 553 5 is_stmt 0 view .LVU69
 214              		.thumb
 215              		.syntax unified
 216              	.LBE39:
 217              	.LBE38:
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 218              		.loc 2 587 5 is_stmt 1 view .LVU70
 219              		.syntax unified
 220              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 221 0060 72B6     		CPSID i
 222              	@ 0 "" 2
 223              		.loc 2 589 5 view .LVU71
 224              	.LVL15:
 225              		.loc 2 589 5 is_stmt 0 view .LVU72
 226              		.thumb
 227              		.syntax unified
ARM GAS  /tmp/ccNDC9PJ.s 			page 20


 228 0062 D5E7     		b	.L2
 229              	.LVL16:
 230              	.L3:
 231              		.loc 2 589 5 view .LVU73
 232              	.LBE37:
 233              	.LBE36:
 152:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             previous_thread =                               thread_ptr -> tx_thread
 234              		.loc 1 152 29 is_stmt 1 view .LVU74
 152:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             previous_thread =                               thread_ptr -> tx_thread
 235              		.loc 1 152 41 is_stmt 0 view .LVU75
 236 0064 016F     		ldr	r1, [r0, #112]
 237              	.LVL17:
 153:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             next_thread -> tx_thread_suspended_previous =   previous_thread;
 238              		.loc 1 153 29 is_stmt 1 view .LVU76
 153:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             next_thread -> tx_thread_suspended_previous =   previous_thread;
 239              		.loc 1 153 45 is_stmt 0 view .LVU77
 240 0066 446F     		ldr	r4, [r0, #116]
 241              	.LVL18:
 154:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             previous_thread -> tx_thread_suspended_next =   next_thread;
 242              		.loc 1 154 29 is_stmt 1 view .LVU78
 154:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             previous_thread -> tx_thread_suspended_next =   next_thread;
 243              		.loc 1 154 73 is_stmt 0 view .LVU79
 244 0068 4C67     		str	r4, [r1, #116]
 245              	.LVL19:
 155:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 246              		.loc 1 155 29 is_stmt 1 view .LVU80
 155:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 247              		.loc 1 155 73 is_stmt 0 view .LVU81
 248 006a 2167     		str	r1, [r4, #112]
 158:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             {
 249              		.loc 1 158 29 is_stmt 1 view .LVU82
 158:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             {
 250              		.loc 1 158 43 is_stmt 0 view .LVU83
 251 006c 9469     		ldr	r4, [r2, #24]
 252              	.LVL20:
 158:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             {
 253              		.loc 1 158 32 view .LVU84
 254 006e 8442     		cmp	r4, r0
 255 0070 E6D1     		bne	.L4
 162:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             }
 256              		.loc 1 162 33 is_stmt 1 view .LVU85
 162:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                             }
 257              		.loc 1 162 71 is_stmt 0 view .LVU86
 258 0072 9161     		str	r1, [r2, #24]
 259 0074 E4E7     		b	.L4
 260              	.L8:
 261 0076 00BF     		.align	2
 262              	.L7:
 263 0078 00000000 		.word	_tx_mutex_cleanup
 264 007c 4554554D 		.word	1297437765
 265 0080 00000000 		.word	_tx_thread_preempt_disable
 266              		.cfi_endproc
 267              	.LFE8:
 269              		.section	.text._tx_mutex_thread_release,"ax",%progbits
 270              		.align	1
 271              		.global	_tx_mutex_thread_release
 272              		.syntax unified
ARM GAS  /tmp/ccNDC9PJ.s 			page 21


 273              		.thumb
 274              		.thumb_func
 276              	_tx_mutex_thread_release:
 277              	.LVL21:
 278              	.LFB9:
 216:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 217:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 218:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**************************************************************************/
 219:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 220:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  FUNCTION                                               RELEASE        */
 221:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 222:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    _tx_mutex_thread_release                            PORTABLE C      */
 223:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                           6.1          */
 224:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  AUTHOR                                                                */
 225:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 226:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    William E. Lamie, Microsoft Corporation                             */
 227:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 228:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  DESCRIPTION                                                           */
 229:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 230:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    This function releases all mutexes owned by the thread. This        */
 231:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    function is called when the thread completes or is terminated.      */
 232:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 233:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  INPUT                                                                 */
 234:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 235:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    thread_ptr                        Pointer to thread's control block */
 236:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 237:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  OUTPUT                                                                */
 238:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 239:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    None                                                                */
 240:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 241:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  CALLS                                                                 */
 242:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 243:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    _tx_mutex_put                     Release the mutex                 */
 244:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 245:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  CALLED BY                                                             */
 246:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 247:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    _tx_thread_shell_entry            Thread completion processing      */
 248:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    _tx_thread_terminate              Thread terminate processing       */
 249:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 250:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  RELEASE HISTORY                                                       */
 251:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 252:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*    DATE              NAME                      DESCRIPTION             */
 253:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 254:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
 255:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
 256:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                            resulting in version 6.1    */
 257:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /*                                                                        */
 258:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** /**************************************************************************/
 259:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
 260:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** {
 279              		.loc 1 260 1 is_stmt 1 view -0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              		.loc 1 260 1 is_stmt 0 view .LVU88
 284 0000 10B5     		push	{r4, lr}
 285              	.LCFI1:
ARM GAS  /tmp/ccNDC9PJ.s 			page 22


 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 4, -8
 288              		.cfi_offset 14, -4
 289 0002 0446     		mov	r4, r0
 261:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 262:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** TX_INTERRUPT_SAVE_AREA
 290              		.loc 1 262 1 is_stmt 1 view .LVU89
 263:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 264:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** TX_MUTEX    *mutex_ptr;
 291              		.loc 1 264 1 view .LVU90
 265:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #ifdef TX_MISRA_ENABLE
 266:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** UINT        status;
 267:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #endif
 268:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 269:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 270:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     /* Disable interrupts.  */
 271:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     TX_DISABLE
 292              		.loc 1 271 5 view .LVU91
 293              	.LBB40:
 294              	.LBI40:
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 295              		.loc 2 578 63 view .LVU92
 296              	.LBB41:
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 297              		.loc 2 580 1 view .LVU93
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 298              		.loc 2 582 5 view .LVU94
 299              	.LBB42:
 300              	.LBI42:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 301              		.loc 2 545 63 view .LVU95
 302              	.LBB43:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 303              		.loc 2 547 1 view .LVU96
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 304              		.loc 2 551 5 view .LVU97
 305              		.syntax unified
 306              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 307 0004 EFF31083 		MRS  r3, PRIMASK 
 308              	@ 0 "" 2
 309              	.LVL22:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 310              		.loc 2 553 5 view .LVU98
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 311              		.loc 2 553 5 is_stmt 0 view .LVU99
 312              		.thumb
 313              		.syntax unified
 314              	.LBE43:
 315              	.LBE42:
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 316              		.loc 2 587 5 is_stmt 1 view .LVU100
 317              		.syntax unified
 318              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 319 0008 72B6     		CPSID i
 320              	@ 0 "" 2
 321              		.loc 2 589 5 view .LVU101
 322              	.LVL23:
ARM GAS  /tmp/ccNDC9PJ.s 			page 23


 323              		.loc 2 589 5 is_stmt 0 view .LVU102
 324              		.thumb
 325              		.syntax unified
 326              	.LBE41:
 327              	.LBE40:
 272:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 273:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     /* Temporarily disable preemption.  */
 274:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     _tx_thread_preempt_disable++;
 328              		.loc 1 274 5 is_stmt 1 view .LVU103
 329              		.loc 1 274 31 is_stmt 0 view .LVU104
 330 000a 0E49     		ldr	r1, .L15
 331 000c 0A68     		ldr	r2, [r1]
 332 000e 0132     		adds	r2, r2, #1
 333 0010 0A60     		str	r2, [r1]
 334 0012 0BE0     		b	.L11
 335              	.LVL24:
 336              	.L14:
 275:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 276:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     /* Loop to look at all the mutexes.  */
 277:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     do
 278:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     {
 279:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 280:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         /* Pickup the mutex head pointer.  */
 281:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 282:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 283:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         /* Determine if there is a mutex.  */
 284:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         if (mutex_ptr != TX_NULL)
 285:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         {
 286:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 287:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             /* Yes, set the ownership count to 1.  */
 288:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 337              		.loc 1 288 13 is_stmt 1 view .LVU105
 338              		.loc 1 288 51 is_stmt 0 view .LVU106
 339 0014 0122     		movs	r2, #1
 340 0016 8260     		str	r2, [r0, #8]
 289:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 290:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             /* Restore interrupts.   */
 291:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             TX_RESTORE
 341              		.loc 1 291 13 is_stmt 1 view .LVU107
 342              	.LVL25:
 343              	.LBB44:
 344              	.LBI44:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 345              		.loc 2 568 55 view .LVU108
 346              	.LBB45:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 347              		.loc 2 574 5 view .LVU109
 348              		.syntax unified
 349              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 350 0018 83F31088 		MSR  PRIMASK,r3
 351              	@ 0 "" 2
 352              	.LVL26:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 353              		.loc 2 574 5 is_stmt 0 view .LVU110
 354              		.thumb
 355              		.syntax unified
 356              	.LBE45:
ARM GAS  /tmp/ccNDC9PJ.s 			page 24


 357              	.LBE44:
 292:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 293:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #ifdef TX_MISRA_ENABLE
 294:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             /* Release the mutex.  */
 295:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             do
 296:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             {
 297:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****                 status =  _tx_mutex_put(mutex_ptr);
 298:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             } while (status != TX_SUCCESS);
 299:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #else
 300:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             _tx_mutex_put(mutex_ptr);
 358              		.loc 1 300 13 is_stmt 1 view .LVU111
 359 001c FFF7FEFF 		bl	_tx_mutex_put
 360              	.LVL27:
 301:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** #endif
 302:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 303:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             /* Disable interrupts.  */
 304:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             TX_DISABLE
 361              		.loc 1 304 13 view .LVU112
 362              	.LBB46:
 363              	.LBI46:
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 364              		.loc 2 578 63 view .LVU113
 365              	.LBB47:
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 366              		.loc 2 580 1 view .LVU114
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 367              		.loc 2 582 5 view .LVU115
 368              	.LBB48:
 369              	.LBI48:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 370              		.loc 2 545 63 view .LVU116
 371              	.LBB49:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 372              		.loc 2 547 1 view .LVU117
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 373              		.loc 2 551 5 view .LVU118
 374              		.syntax unified
 375              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 376 0020 EFF31083 		MRS  r3, PRIMASK 
 377              	@ 0 "" 2
 378              	.LVL28:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 379              		.loc 2 553 5 view .LVU119
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 380              		.loc 2 553 5 is_stmt 0 view .LVU120
 381              		.thumb
 382              		.syntax unified
 383              	.LBE49:
 384              	.LBE48:
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 385              		.loc 2 587 5 is_stmt 1 view .LVU121
 386              		.syntax unified
 387              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 388 0024 72B6     		CPSID i
 389              	@ 0 "" 2
 390              		.loc 2 589 5 view .LVU122
 391              	.LVL29:
ARM GAS  /tmp/ccNDC9PJ.s 			page 25


 392              		.loc 2 589 5 is_stmt 0 view .LVU123
 393              		.thumb
 394              		.syntax unified
 395              	.LBE47:
 396              	.LBE46:
 305:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 306:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             /* Move to the next mutex.  */
 307:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****             mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 397              		.loc 1 307 13 is_stmt 1 view .LVU124
 398              		.loc 1 307 23 is_stmt 0 view .LVU125
 399 0026 D4F8A400 		ldr	r0, [r4, #164]
 400              	.LVL30:
 401              	.L10:
 308:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         }
 309:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     } while (mutex_ptr != TX_NULL);
 402              		.loc 1 309 24 is_stmt 1 view .LVU126
 403 002a 20B1     		cbz	r0, .L13
 404              	.LVL31:
 405              	.L11:
 277:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     {
 406              		.loc 1 277 5 view .LVU127
 281:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 407              		.loc 1 281 9 view .LVU128
 281:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 408              		.loc 1 281 19 is_stmt 0 view .LVU129
 409 002c D4F8A400 		ldr	r0, [r4, #164]
 410              	.LVL32:
 284:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         {
 411              		.loc 1 284 9 is_stmt 1 view .LVU130
 284:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         {
 412              		.loc 1 284 12 is_stmt 0 view .LVU131
 413 0030 0028     		cmp	r0, #0
 414 0032 EFD1     		bne	.L14
 284:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****         {
 415              		.loc 1 284 12 view .LVU132
 416 0034 F9E7     		b	.L10
 417              	.L13:
 310:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 311:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     /* Restore preemption.  */
 312:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     _tx_thread_preempt_disable--;
 418              		.loc 1 312 5 is_stmt 1 view .LVU133
 419              		.loc 1 312 31 is_stmt 0 view .LVU134
 420 0036 0349     		ldr	r1, .L15
 421 0038 0A68     		ldr	r2, [r1]
 422 003a 013A     		subs	r2, r2, #1
 423 003c 0A60     		str	r2, [r1]
 313:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** 
 314:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     /* Restore interrupts.  */
 315:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c ****     TX_RESTORE
 424              		.loc 1 315 5 is_stmt 1 view .LVU135
 425              	.LVL33:
 426              	.LBB50:
 427              	.LBI50:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 428              		.loc 2 568 55 view .LVU136
 429              	.LBB51:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccNDC9PJ.s 			page 26


 430              		.loc 2 574 5 view .LVU137
 431              		.syntax unified
 432              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 433 003e 83F31088 		MSR  PRIMASK,r3
 434              	@ 0 "" 2
 435              	.LVL34:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 436              		.loc 2 574 5 is_stmt 0 view .LVU138
 437              		.thumb
 438              		.syntax unified
 439              	.LBE51:
 440              	.LBE50:
 316:Middlewares/ST/threadx/common/src/tx_mutex_cleanup.c **** }
 441              		.loc 1 316 1 view .LVU139
 442 0042 10BD     		pop	{r4, pc}
 443              	.LVL35:
 444              	.L16:
 445              		.loc 1 316 1 view .LVU140
 446              		.align	2
 447              	.L15:
 448 0044 00000000 		.word	_tx_thread_preempt_disable
 449              		.cfi_endproc
 450              	.LFE9:
 452              		.text
 453              	.Letext0:
 454              		.file 3 "Middlewares/ST/threadx/common/inc/tx_api.h"
 455              		.file 4 "Middlewares/ST/threadx/common/inc/tx_thread.h"
ARM GAS  /tmp/ccNDC9PJ.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 tx_mutex_cleanup.c
     /tmp/ccNDC9PJ.s:20     .text._tx_mutex_cleanup:00000000 $t
     /tmp/ccNDC9PJ.s:26     .text._tx_mutex_cleanup:00000000 _tx_mutex_cleanup
     /tmp/ccNDC9PJ.s:263    .text._tx_mutex_cleanup:00000078 $d
     /tmp/ccNDC9PJ.s:270    .text._tx_mutex_thread_release:00000000 $t
     /tmp/ccNDC9PJ.s:276    .text._tx_mutex_thread_release:00000000 _tx_mutex_thread_release
     /tmp/ccNDC9PJ.s:448    .text._tx_mutex_thread_release:00000044 $d

UNDEFINED SYMBOLS
_tx_thread_system_resume
_tx_thread_preempt_disable
_tx_mutex_put
