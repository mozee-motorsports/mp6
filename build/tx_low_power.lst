ARM GAS  /tmp/ccBCd4em.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"tx_low_power.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Middlewares/ST/threadx/utility/low_power/tx_low_power.c"
  19              		.section	.text.tx_low_power_enter,"ax",%progbits
  20              		.align	1
  21              		.global	tx_low_power_enter
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	tx_low_power_enter:
  27              	.LFB8:
   1:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
   2:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
   3:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
   5:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  10:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
  11:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  12:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  13:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
  14:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
  15:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**                                                                       */
  16:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**                                                                       */
  18:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**   Low Power Timer Management                                          */
  19:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**                                                                       */
  20:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
  21:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
  22:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  23:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #define TX_SOURCE_CODE
  24:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  25:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  26:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /* Include necessary system files.  */
  27:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  28:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #include "tx_api.h"
  29:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #include "tx_timer.h"
  30:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #include "tx_low_power.h"
  31:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
ARM GAS  /tmp/ccBCd4em.s 			page 2


  32:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  33:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /* Define low power global variables.  */
  34:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  35:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /* Flag to determine if we've entered low power mode or not. */
  36:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** UINT    tx_low_power_entered;
  37:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  38:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  39:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
  40:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  41:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  FUNCTION                                               RELEASE        */
  42:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  43:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    tx_low_power_enter                                  PORTABLE C      */
  44:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                           6.1.6        */
  45:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  AUTHOR                                                                */
  46:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  47:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    William E. Lamie, Microsoft Corporation                             */
  48:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  49:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  DESCRIPTION                                                           */
  50:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  51:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    This function is the low power entry function. This function is     */
  52:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    assumed to be called from the idle loop of tx_thread_schedule. It   */
  53:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    is important to note that if an interrupt managed by ThreadX occurs */
  54:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    anywhere where interrupts are enabled in this function, the entire  */
  55:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    processing of this function is discarded and the function won't be  */
  56:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    re-entered until the idle loop in tx_thread_schedule is executed    */
  57:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    again.                                                              */
  58:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  59:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  INPUT                                                                 */
  60:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  61:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    None                                                                */
  62:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  63:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  OUTPUT                                                                */
  64:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  65:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    None                                                                */
  66:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  67:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  CALLS                                                                 */
  68:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  69:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    tx_timer_get_next                     Get next timer expiration     */
  70:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  71:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  CALLED BY                                                             */
  72:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  73:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    _tx_thread_schedule                   Thread scheduling loop        */
  74:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  75:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  RELEASE HISTORY                                                       */
  76:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  77:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    DATE              NAME                      DESCRIPTION             */
  78:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  79:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  03-02-2021      William E. Lamie        Initial Version 6.1.5         */
  80:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  04-02-2021      Scott Larson            Modified comments and fixed   */
  81:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                            compiler warning,           */
  82:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                            resulting in version 6.1.6  */
  83:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
  84:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
  85:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** VOID  tx_low_power_enter(VOID)
  86:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** {
  28              		.loc 1 86 1 view -0
  29              		.cfi_startproc
ARM GAS  /tmp/ccBCd4em.s 			page 3


  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  87:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  88:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** TX_INTERRUPT_SAVE_AREA
  33              		.loc 1 88 1 view .LVU1
  89:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  90:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #ifdef TX_LOW_POWER_TIMER_SETUP
  91:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks)
  92:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** ULONG   timers_active;
  93:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #endif
  94:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  95:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Disable interrupts while we prepare for low power mode.  */
  96:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     TX_DISABLE
  34              		.loc 1 96 5 view .LVU2
  35              	.LBB22:
  36              	.LBI22:
  37              		.file 2 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h"
   1:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
   2:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   3:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   5:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  10:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  11:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  12:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  13:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  14:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  15:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  16:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  18:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  20:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  21:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  22:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  23:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  24:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  25:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  26:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  28:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M7/GNU     */
  29:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                           6.1.12       */
  30:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  31:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  33:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  35:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  37:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
ARM GAS  /tmp/ccBCd4em.s 			page 4


  40:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  46:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  49:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  51:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  53:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  04-25-2022      Scott Larson            Modified comments and added   */
  60:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            volatile to registers,      */
  61:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.11 */
  62:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  07-29-2022      Scott Larson            Modified comments and         */
  63:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            described BASEPRI usage,    */
  64:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.12 */
  65:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  66:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  67:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  68:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  69:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_H
  70:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  71:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  72:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  73:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  74:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  75:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  76:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  77:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  78:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  79:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_user.h"
  80:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  81:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  82:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  83:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  84:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  85:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <stdlib.h>
  86:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <string.h>
  87:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  88:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  89:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  90:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  91:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  92:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <yvals.h>
  93:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  94:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  95:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  96:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
ARM GAS  /tmp/ccBCd4em.s 			page 5


  97:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  98:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  99:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 100:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 101:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 102:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
 103:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
 104:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
 105:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 106:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 107:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef __GNUC__
 108:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 109:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 110:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 111:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 112:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 113:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define VOID                                    void
 114:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 115:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 116:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef int                                     INT;
 117:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 118:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef long                                    LONG;
 119:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 120:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 121:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 122:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 123:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 124:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 125:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 126:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 127:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 128:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 129:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 130:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 131:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 132:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 133:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 134:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 135:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 136:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 137:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 138:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 139:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 140:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 141:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 142:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 143:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 144:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 145:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 146:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 147:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 148:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 149:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 150:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 151:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 152:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* By default, ThreadX for Cortex-M uses the PRIMASK register to enable/disable interrupts.
 153:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** If using BASEPRI is desired, define the following two symbols for both c and assembly files:
ARM GAS  /tmp/ccBCd4em.s 			page 6


 154:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_USE_BASEPRI - This tells ThreadX to use BASEPRI instead of PRIMASK.
 155:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_BASEPRI = (priority_mask << (8 - number_priority_bits)) - this defines the maximum priority
 156:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** Any interrupt with a higher priority than priority_mask will not be masked, thus the interrupt will
 157:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 158:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 159:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 160:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 161:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 162:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 163:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 164:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 165:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 166:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 167:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    source constants would be:
 168:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 169:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0x0a800024)
 170:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 171:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 172:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 173:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 174:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 175:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 176:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0xE0001004)
 177:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 178:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 179:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 180:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 181:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 182:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 183:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 184:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 185:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 186:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 187:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
 188:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 189:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 190:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 191:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 192:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 193:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 194:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 195:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 196:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 197:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 198:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 199:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 200:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 201:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 202:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 203:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 204:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 205:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 206:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 207:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 208:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 209:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 210:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    a function call.  */
ARM GAS  /tmp/ccBCd4em.s 			page 7


 211:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 212:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 213:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 214:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 215:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 216:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 217:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 218:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 219:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 220:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 221:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 222:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 223:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    logic.  */
 224:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 225:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 226:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 227:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 228:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 229:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 230:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 231:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 232:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 233:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 234:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 235:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 236:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 237:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 238:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 239:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 240:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 241:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 242:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 243:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 244:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 245:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 246:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 247:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 248:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 249:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 250:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 251:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 252:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 253:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 254:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 255:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 256:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 257:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 258:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 259:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 260:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 261:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 262:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 263:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 264:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 265:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 266:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 267:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
ARM GAS  /tmp/ccBCd4em.s 			page 8


 268:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 269:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 270:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 271:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 272:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 273:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 274:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 275:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 276:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 277:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 278:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 279:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 280:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 281:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 282:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 283:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 284:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 285:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 286:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 287:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 288:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 289:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 290:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 291:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 292:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 293:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 294:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 295:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 296:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 297:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 298:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 299:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 300:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 301:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 302:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 303:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 304:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 305:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 306:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 307:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 308:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 309:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 310:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 311:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 312:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 313:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 314:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 315:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 316:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 317:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 318:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 319:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 320:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 321:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 322:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 323:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 324:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
ARM GAS  /tmp/ccBCd4em.s 			page 9


 325:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 326:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 327:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 328:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 329:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 330:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 331:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 332:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 333:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 334:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 335:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 336:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 337:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 338:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 339:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 340:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 341:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 342:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 343:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 344:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 345:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 346:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 347:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 348:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 349:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 350:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 351:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 352:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 353:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 354:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 355:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 356:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 357:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 358:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 359:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 360:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 361:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 362:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 363:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 364:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 365:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 366:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 367:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 368:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 369:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 370:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 371:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 372:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 373:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 374:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 375:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 376:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 377:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 378:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 379:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 380:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 381:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
ARM GAS  /tmp/ccBCd4em.s 			page 10


 382:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 383:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 384:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 385:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 386:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 387:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 388:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 389:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 390:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 391:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 392:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 393:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((volatile ULONG *) 0xE00
 394:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 395:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 396:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 397:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 398:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 399:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 400:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 401:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 402:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 403:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 404:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 405:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 406:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 407:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 408:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 409:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 410:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 411:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 412:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 413:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 414:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 415:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 416:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 417:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 418:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 419:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 420:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 421:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 422:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 423:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 424:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 425:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 426:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 427:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 428:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 429:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 430:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 431:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 432:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 433:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 434:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 435:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 436:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 437:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 438:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
ARM GAS  /tmp/ccBCd4em.s 			page 11


 439:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 440:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 441:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 442:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 443:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 444:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 445:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 446:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 447:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 448:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 449:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 450:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 451:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 452:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 453:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 454:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 455:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 456:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 457:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 458:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 459:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 460:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 461:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 462:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 463:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 464:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 465:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 466:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 467:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 468:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 469:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 470:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 471:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 472:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 473:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 474:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 475:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 476:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 477:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 478:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 479:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 480:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 481:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 482:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 483:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 484:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 485:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 486:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 487:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 488:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 489:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 490:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(ipsr_value);
 491:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 492:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 493:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 494:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 495:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
ARM GAS  /tmp/ccBCd4em.s 			page 12


 496:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 497:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 498:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 499:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 500:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 501:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 502:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 503:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 504:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 505:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 506:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 507:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 508:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 509:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 510:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 511:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 512:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 513:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 514:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 515:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 516:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 517:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 518:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 519:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 520:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 521:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 522:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 523:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 524:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 525:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 526:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 527:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 528:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 529:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 530:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 531:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 532:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 533:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 534:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 535:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 536:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 537:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 538:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 539:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 540:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 541:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 542:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 543:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 544:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 546:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int posture;
 548:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 549:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 550:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 552:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccBCd4em.s 			page 13


 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(posture);
 554:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 555:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 556:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 557:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 558:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 559:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 560:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 561:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 562:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 563:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 564:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 565:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 566:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 567:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 569:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 570:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 571:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 572:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 573:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 575:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 576:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 577:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  38              		.loc 2 578 63 view .LVU3
  39              	.LBB23:
 579:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int int_posture;
  40              		.loc 2 580 1 view .LVU4
 581:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  41              		.loc 2 582 5 view .LVU5
  42              	.LBB24:
  43              	.LBI24:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
  44              		.loc 2 545 63 view .LVU6
  45              	.LBB25:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  46              		.loc 2 547 1 view .LVU7
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  47              		.loc 2 551 5 view .LVU8
  48              		.syntax unified
  49              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  50 0000 EFF31083 		MRS  r3, PRIMASK 
  51              	@ 0 "" 2
  52              	.LVL0:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  53              		.loc 2 553 5 view .LVU9
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  54              		.loc 2 553 5 is_stmt 0 view .LVU10
  55              		.thumb
  56              		.syntax unified
  57              	.LBE25:
  58              	.LBE24:
 583:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccBCd4em.s 			page 14


 584:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 585:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 586:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  59              		.loc 2 587 5 is_stmt 1 view .LVU11
  60              		.syntax unified
  61              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  62 0004 72B6     		CPSID i
  63              	@ 0 "" 2
 588:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 589:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(int_posture);
  64              		.loc 2 589 5 view .LVU12
  65              	.LVL1:
  66              		.loc 2 589 5 is_stmt 0 view .LVU13
  67              		.thumb
  68              		.syntax unified
  69              	.LBE23:
  70              	.LBE22:
  97:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
  98:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /*  TX_LOW_POWER_TIMER_SETUP is a macro to a routine that sets up a low power
  99:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         clock. If such routine does not exist, we can skip the logic that computes
 100:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         the next expiration time. */
 101:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #ifdef TX_LOW_POWER_TIMER_SETUP
 102:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 103:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /*  At this point, we want to enter low power mode, since nothing
 104:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         meaningful is going on in the system. However, in order to keep
 105:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         the ThreadX timer services accurate, we must first determine the
 106:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         next ThreadX timer expiration in terms of ticks. This is
 107:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         accomplished via the tx_timer_get_next API.  */
 108:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 109:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 110:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* There are two possibilities:
 111:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         1:  A ThreadX timer is active. tx_timer_get_next returns TX_TRUE.
 112:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             Program the hardware timer source such that the next timer
 113:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             interrupt is equal to: tx_low_power_next_expiration*tick_frequency.
 114:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             In most applications, the tick_frequency is 10ms, but this is
 115:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             completely application specific in ThreadX, typically set up 
 116:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             in tx_low_level_initialize. Note that in this situation, a low
 117:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             power clock must be used in order to wake up the CPU for the next timeout
 118:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             event. Therefore an alternative clock must be programmed. 
 119:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         2:  There are no ThreadX timers active. tx_timer_get_next returns TX_FALSE.
 120:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             2.a: application may choose not to keep the ThreadX internal
 121:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             tick count updated (define TX_LOW_POWER_TICKLESS), therefore no need
 122:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             to set up a low power clock.
 123:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             2.b: Application still needs to keep ThreadX tick up-to-date. In this case
 124:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             a low power clock needs to be set up.
 125:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     */
 126:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 127:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #ifndef TX_LOW_POWER_TICKLESS
 128:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* We still want to keep track of time in low power mode. */
 129:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     if (timers_active == TX_FALSE)
 130:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 131:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Set the next expiration to 0xFFFFFFF, an indication that the timer sleeps for
 132:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****            maximum amount of time the HW supports.*/
 133:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         tx_low_power_next_expiration = 0xFFFFFFFF;
 134:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         timers_active = TX_TRUE;
 135:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     }
ARM GAS  /tmp/ccBCd4em.s 			page 15


 136:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #endif /* TX_LOW_POWER_TICKLESS */
 137:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 138:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     if (timers_active == TX_TRUE)
 139:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 140:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* A ThreadX timer is active or we simply want to keep track of time. */
 141:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 142:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     }
 143:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #endif /* TX_LOW_POWER_TIMER_SETUP */
 144:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 145:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 146:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Set the flag indicating that low power has been entered. This 
 147:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****        flag is checked in tx_low_power_exit to determine if the logic
 148:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****        used to adjust the ThreadX time is required.  */
 149:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     tx_low_power_entered =  TX_TRUE;
  71              		.loc 1 149 5 is_stmt 1 view .LVU14
  72              		.loc 1 149 26 is_stmt 0 view .LVU15
  73 0006 034A     		ldr	r2, .L2
  74 0008 0121     		movs	r1, #1
  75 000a 1160     		str	r1, [r2]
 150:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 151:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Re-enable interrupts before low power mode is entered.  */
 152:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     TX_RESTORE
  76              		.loc 1 152 5 is_stmt 1 view .LVU16
  77              	.LVL2:
  78              	.LBB26:
  79              	.LBI26:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
  80              		.loc 2 568 55 view .LVU17
  81              	.LBB27:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  82              		.loc 2 574 5 view .LVU18
  83              		.syntax unified
  84              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  85 000c 83F31088 		MSR  PRIMASK,r3
  86              	@ 0 "" 2
  87              	.LVL3:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  88              		.loc 2 574 5 is_stmt 0 view .LVU19
  89              		.thumb
  90              		.syntax unified
  91              	.LBE27:
  92              	.LBE26:
 153:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 154:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* User code to enter low power mode. This allows the application to power down
 155:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****        peripherals and put the processor in sleep mode.
 156:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     */
 157:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #ifdef TX_LOW_POWER_USER_ENTER
 158:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     TX_LOW_POWER_USER_ENTER;
 159:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #endif
 160:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 161:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
 162:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** }
  93              		.loc 1 162 1 view .LVU20
  94 0010 7047     		bx	lr
  95              	.L3:
  96 0012 00BF     		.align	2
  97              	.L2:
ARM GAS  /tmp/ccBCd4em.s 			page 16


  98 0014 00000000 		.word	tx_low_power_entered
  99              		.cfi_endproc
 100              	.LFE8:
 102              		.section	.text.tx_low_power_exit,"ax",%progbits
 103              		.align	1
 104              		.global	tx_low_power_exit
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 109              	tx_low_power_exit:
 110              	.LFB9:
 163:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 164:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 165:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
 166:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 167:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  FUNCTION                                               RELEASE        */
 168:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 169:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    tx_low_power_exit                                   PORTABLE C      */
 170:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                           6.1.5        */
 171:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  AUTHOR                                                                */
 172:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 173:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    William E. Lamie, Microsoft Corporation                             */
 174:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 175:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  DESCRIPTION                                                           */
 176:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 177:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    This function is the low power exit function. This function must    */
 178:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    be called from any interrupt that can wakeup the processor from     */
 179:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    low power mode. If nothing needs to be done, this function simply   */
 180:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    returns.                                                            */
 181:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 182:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  INPUT                                                                 */
 183:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 184:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    None                                                                */
 185:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 186:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  OUTPUT                                                                */
 187:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 188:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    None                                                                */
 189:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 190:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  CALLS                                                                 */
 191:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 192:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    tx_time_increment                     Update the ThreadX timer      */
 193:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 194:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  CALLED BY                                                             */
 195:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 196:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    ISRs                                  Front-end of Interrupt        */
 197:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                            Service Routines            */
 198:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 199:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  RELEASE HISTORY                                                       */
 200:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 201:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    DATE              NAME                      DESCRIPTION             */
 202:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 203:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
 204:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 205:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
 206:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** VOID  tx_low_power_exit(VOID)
 207:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** {
 111              		.loc 1 207 1 is_stmt 1 view -0
ARM GAS  /tmp/ccBCd4em.s 			page 17


 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115              		@ link register save eliminated.
 208:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 209:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /* How many ticks to adjust ThreadX timers after exiting low power mode. */
 210:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** ULONG   tx_low_power_adjust_ticks;
 116              		.loc 1 210 1 view .LVU22
 211:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 212:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 213:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Determine if the interrupt occurred in low power mode.  */
 214:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     if (tx_low_power_entered)
 117              		.loc 1 214 5 view .LVU23
 118              		.loc 1 214 9 is_stmt 0 view .LVU24
 119 0000 034B     		ldr	r3, .L6
 120 0002 1B68     		ldr	r3, [r3]
 121              		.loc 1 214 8 view .LVU25
 122 0004 13B1     		cbz	r3, .L4
 215:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 216:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Yes, low power mode was interrupted.   */
 217:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 218:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Clear the low power entered flag.  */
 219:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         tx_low_power_entered =  TX_FALSE;
 123              		.loc 1 219 9 is_stmt 1 view .LVU26
 124              		.loc 1 219 30 is_stmt 0 view .LVU27
 125 0006 024B     		ldr	r3, .L6
 126 0008 0022     		movs	r2, #0
 127 000a 1A60     		str	r2, [r3]
 220:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 221:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* User code to exit low power mode and reprogram the
 222:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****            timer to the desired interrupt frequency.  */
 223:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #ifdef TX_LOW_POWER_USER_EXIT
 224:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         TX_LOW_POWER_USER_EXIT;
 225:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #endif
 226:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 227:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #ifdef TX_LOW_POWER_USER_TIMER_ADJUST
 228:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Call the user's low-power timer code to obtain the amount of time (in ticks)
 229:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****            the system has been in low power mode. */
 230:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 231:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #else
 232:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         tx_low_power_adjust_ticks = (ULONG) 0;
 128              		.loc 1 232 9 is_stmt 1 view .LVU28
 129              	.LVL4:
 233:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** #endif
 234:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 235:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Determine if the ThreadX timer(s) needs incrementing.  */
 236:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         if (tx_low_power_adjust_ticks)
 130              		.loc 1 236 9 view .LVU29
 131              	.L4:
 237:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 238:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* Yes, the ThreadX timer(s) must be incremented.  */
 239:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             tx_time_increment(tx_low_power_adjust_ticks);
 240:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 241:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     }
 242:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** }
 132              		.loc 1 242 1 is_stmt 0 view .LVU30
 133 000c 7047     		bx	lr
ARM GAS  /tmp/ccBCd4em.s 			page 18


 134              	.L7:
 135 000e 00BF     		.align	2
 136              	.L6:
 137 0010 00000000 		.word	tx_low_power_entered
 138              		.cfi_endproc
 139              	.LFE9:
 141              		.section	.text.tx_timer_get_next,"ax",%progbits
 142              		.align	1
 143              		.global	tx_timer_get_next
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 148              	tx_timer_get_next:
 149              	.LVL5:
 150              	.LFB10:
 243:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 244:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 245:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
 246:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 247:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  FUNCTION                                               RELEASE        */
 248:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 249:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    tx_timer_get_next                                   PORTABLE C      */
 250:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                           6.1.5        */
 251:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  AUTHOR                                                                */
 252:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 253:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    William E. Lamie, Microsoft Corporation                             */
 254:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 255:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  DESCRIPTION                                                           */
 256:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 257:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    This function calculates the next expiration time minus 1 tick for  */
 258:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    the currently active ThreadX timers.  If no timer is active, this   */
 259:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    routine will return a value of TX_FALSE and the next ticks value    */
 260:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    will be set to zero.                                                */
 261:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 262:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  INPUT                                                                 */
 263:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 264:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    next_timer_tick_ptr               Pointer to destination for next   */
 265:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                        timer expiration value          */
 266:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 267:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  OUTPUT                                                                */
 268:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 269:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    TX_TRUE (1)                       At least one timer is active      */
 270:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    TX_FALSE (0)                      No timers are currently active    */
 271:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 272:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  CALLS                                                                 */
 273:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 274:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    None                                                                */
 275:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 276:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  CALLED BY                                                             */
 277:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 278:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    tx_low_power_enter                                                  */
 279:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 280:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  RELEASE HISTORY                                                       */
 281:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 282:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    DATE              NAME                      DESCRIPTION             */
 283:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 284:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
ARM GAS  /tmp/ccBCd4em.s 			page 19


 285:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 286:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
 287:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
 288:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** {
 151              		.loc 1 288 1 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		.loc 1 288 1 is_stmt 0 view .LVU32
 156 0000 70B5     		push	{r4, r5, r6, lr}
 157              	.LCFI0:
 158              		.cfi_def_cfa_offset 16
 159              		.cfi_offset 4, -16
 160              		.cfi_offset 5, -12
 161              		.cfi_offset 6, -8
 162              		.cfi_offset 14, -4
 163 0002 8646     		mov	lr, r0
 289:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 290:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** TX_INTERRUPT_SAVE_AREA
 164              		.loc 1 290 1 is_stmt 1 view .LVU33
 291:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 292:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** TX_TIMER_INTERNAL           **timer_list_head;
 165              		.loc 1 292 1 view .LVU34
 293:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** TX_TIMER_INTERNAL           *next_timer;
 166              		.loc 1 293 1 view .LVU35
 294:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** UINT                        i;
 167              		.loc 1 294 1 view .LVU36
 295:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** ULONG                       calculated_time;
 168              		.loc 1 295 1 view .LVU37
 296:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 169              		.loc 1 296 1 view .LVU38
 170              	.LVL6:
 297:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 298:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 299:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Disable interrupts.  */
 300:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     TX_DISABLE
 171              		.loc 1 300 5 view .LVU39
 172              	.LBB28:
 173              	.LBI28:
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 174              		.loc 2 578 63 view .LVU40
 175              	.LBB29:
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 176              		.loc 2 580 1 view .LVU41
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 177              		.loc 2 582 5 view .LVU42
 178              	.LBB30:
 179              	.LBI30:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 180              		.loc 2 545 63 view .LVU43
 181              	.LBB31:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 182              		.loc 2 547 1 view .LVU44
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 183              		.loc 2 551 5 view .LVU45
 184              		.syntax unified
 185              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
ARM GAS  /tmp/ccBCd4em.s 			page 20


 186 0004 EFF31085 		MRS  r5, PRIMASK 
 187              	@ 0 "" 2
 188              	.LVL7:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 189              		.loc 2 553 5 view .LVU46
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 190              		.loc 2 553 5 is_stmt 0 view .LVU47
 191              		.thumb
 192              		.syntax unified
 193              	.LBE31:
 194              	.LBE30:
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 195              		.loc 2 587 5 is_stmt 1 view .LVU48
 196              		.syntax unified
 197              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 198 0008 72B6     		CPSID i
 199              	@ 0 "" 2
 200              		.loc 2 589 5 view .LVU49
 201              	.LVL8:
 202              		.loc 2 589 5 is_stmt 0 view .LVU50
 203              		.thumb
 204              		.syntax unified
 205              	.LBE29:
 206              	.LBE28:
 301:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 302:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Look at the next timer entry.  */
 303:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     timer_list_head =  _tx_timer_current_ptr;
 207              		.loc 1 303 5 is_stmt 1 view .LVU51
 208              		.loc 1 303 21 is_stmt 0 view .LVU52
 209 000a 184B     		ldr	r3, .L23
 210 000c 1C68     		ldr	r4, [r3]
 211              	.LVL9:
 304:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 305:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Loop through the timer list, looking for the first non-NULL
 306:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****        value to signal an active timer.  */
 307:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 212              		.loc 1 307 5 is_stmt 1 view .LVU53
 296:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 213              		.loc 1 296 29 is_stmt 0 view .LVU54
 214 000e 4FF0FF36 		mov	r6, #-1
 215              		.loc 1 307 12 view .LVU55
 216 0012 0021     		movs	r1, #0
 217              		.loc 1 307 5 view .LVU56
 218 0014 10E0     		b	.L9
 219              	.LVL10:
 220              	.L22:
 308:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 309:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Now determine if there is an active timer in this slot.  */
 310:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         if (*timer_list_head)
 311:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 312:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* Setup the pointer to the expiration list.  */
 313:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             next_timer =  *timer_list_head;
 221              		.loc 1 313 24 view .LVU57
 222 0016 0246     		mov	r2, r0
 223 0018 04E0     		b	.L13
 224              	.LVL11:
 225              	.L18:
ARM GAS  /tmp/ccBCd4em.s 			page 21


 314:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 315:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* Loop through the timers active for this relative time slot (determined by i).  */
 316:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             do
 317:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             {
 318:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 /* Determine if the remaining time is larger than the list.  */
 319:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 320:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 321:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                     /* Calculate the expiration time.  */
 322:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                     calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_
 323:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 324:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 else
 325:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 326:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                     /* Calculate the expiration time, which is simply the number of entries in this
 327:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                     calculated_time =  i;
 226              		.loc 1 327 37 view .LVU58
 227 001a 0B46     		mov	r3, r1
 228 001c 07E0     		b	.L11
 229              	.LVL12:
 230              	.L12:
 328:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 329:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 330:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 /* Determine if a new minimum expiration time is present.  */
 331:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 if (expiration_time > calculated_time)
 332:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 333:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                     /* Yes, a new minimum expiration time is present - remember it!  */
 334:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                     expiration_time =  calculated_time;
 335:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 336:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 337:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 /* Move to the next entry in the timer list.  */
 338:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 next_timer =  next_timer -> tx_timer_internal_active_next;
 231              		.loc 1 338 17 is_stmt 1 view .LVU59
 232              		.loc 1 338 28 is_stmt 0 view .LVU60
 233 001e 1269     		ldr	r2, [r2, #16]
 234              	.LVL13:
 339:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 340:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             } while (next_timer != *timer_list_head);
 235              		.loc 1 340 33 is_stmt 1 view .LVU61
 236 0020 9042     		cmp	r0, r2
 237 0022 0ED0     		beq	.L10
 238              	.LVL14:
 239              	.L13:
 316:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             {
 240              		.loc 1 316 13 view .LVU62
 319:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 241              		.loc 1 319 17 view .LVU63
 319:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 242              		.loc 1 319 32 is_stmt 0 view .LVU64
 243 0024 1368     		ldr	r3, [r2]
 319:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 244              		.loc 1 319 20 view .LVU65
 245 0026 202B     		cmp	r3, #32
 246 0028 F7D9     		bls	.L18
 322:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 247              		.loc 1 322 21 is_stmt 1 view .LVU66
 322:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 248              		.loc 1 322 88 is_stmt 0 view .LVU67
 249 002a 0B44     		add	r3, r3, r1
ARM GAS  /tmp/ccBCd4em.s 			page 22


 322:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 250              		.loc 1 322 37 view .LVU68
 251 002c 203B     		subs	r3, r3, #32
 252              	.LVL15:
 253              	.L11:
 331:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 254              		.loc 1 331 17 is_stmt 1 view .LVU69
 331:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 255              		.loc 1 331 20 is_stmt 0 view .LVU70
 256 002e B342     		cmp	r3, r6
 257 0030 F5D2     		bcs	.L12
 334:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 258              		.loc 1 334 37 view .LVU71
 259 0032 1E46     		mov	r6, r3
 260              	.LVL16:
 334:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 261              		.loc 1 334 37 view .LVU72
 262 0034 F3E7     		b	.L12
 263              	.LVL17:
 264              	.L14:
 307:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 265              		.loc 1 307 46 is_stmt 1 discriminator 2 view .LVU73
 266 0036 0131     		adds	r1, r1, #1
 267              	.LVL18:
 268              	.L9:
 307:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 269              		.loc 1 307 25 discriminator 1 view .LVU74
 270 0038 1F29     		cmp	r1, #31
 271 003a 0AD8     		bhi	.L21
 310:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 272              		.loc 1 310 9 view .LVU75
 310:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 273              		.loc 1 310 13 is_stmt 0 view .LVU76
 274 003c 2068     		ldr	r0, [r4]
 310:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 275              		.loc 1 310 12 view .LVU77
 276 003e 0028     		cmp	r0, #0
 277 0040 E9D1     		bne	.L22
 278              	.L10:
 341:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 342:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 343:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* This timer entry is NULL, so just move to the next one.  */
 344:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         timer_list_head++;
 279              		.loc 1 344 9 is_stmt 1 view .LVU78
 280              		.loc 1 344 24 is_stmt 0 view .LVU79
 281 0042 0434     		adds	r4, r4, #4
 282              	.LVL19:
 345:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 346:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Check for timer list wrap condition.  */
 347:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         if (timer_list_head >= _tx_timer_list_end)
 283              		.loc 1 347 9 is_stmt 1 view .LVU80
 284              		.loc 1 347 29 is_stmt 0 view .LVU81
 285 0044 0A4B     		ldr	r3, .L23+4
 286 0046 1B68     		ldr	r3, [r3]
 287              		.loc 1 347 12 view .LVU82
 288 0048 A342     		cmp	r3, r4
 289 004a F4D8     		bhi	.L14
ARM GAS  /tmp/ccBCd4em.s 			page 23


 348:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 349:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* Wrap to the beginning of the list.  */
 350:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             timer_list_head =  _tx_timer_list_start;
 290              		.loc 1 350 13 is_stmt 1 view .LVU83
 291              		.loc 1 350 29 is_stmt 0 view .LVU84
 292 004c 094B     		ldr	r3, .L23+8
 293 004e 1C68     		ldr	r4, [r3]
 294              	.LVL20:
 295              		.loc 1 350 29 view .LVU85
 296 0050 F1E7     		b	.L14
 297              	.L21:
 351:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 352:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     }
 353:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 354:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Restore interrupts.  */
 355:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     TX_RESTORE
 298              		.loc 1 355 5 is_stmt 1 view .LVU86
 299              	.LVL21:
 300              	.LBB32:
 301              	.LBI32:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 302              		.loc 2 568 55 view .LVU87
 303              	.LBB33:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 304              		.loc 2 574 5 view .LVU88
 305              		.syntax unified
 306              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 307 0052 85F31088 		MSR  PRIMASK,r5
 308              	@ 0 "" 2
 309              	.LVL22:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 310              		.loc 2 574 5 is_stmt 0 view .LVU89
 311              		.thumb
 312              		.syntax unified
 313              	.LBE33:
 314              	.LBE32:
 356:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 357:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Determine if an active timer was found.  */
 358:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     if (expiration_time != (ULONG) 0xFFFFFFFF)
 315              		.loc 1 358 5 is_stmt 1 view .LVU90
 316              		.loc 1 358 8 is_stmt 0 view .LVU91
 317 0056 B6F1FF3F 		cmp	r6, #-1
 318 005a 03D0     		beq	.L16
 359:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 360:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Yes, an active timer was found.  */
 361:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         *next_timer_tick_ptr =  expiration_time;
 319              		.loc 1 361 9 is_stmt 1 view .LVU92
 320              		.loc 1 361 30 is_stmt 0 view .LVU93
 321 005c CEF80060 		str	r6, [lr]
 362:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         return(TX_TRUE);
 322              		.loc 1 362 9 is_stmt 1 view .LVU94
 323              		.loc 1 362 15 is_stmt 0 view .LVU95
 324 0060 0120     		movs	r0, #1
 325              	.L8:
 363:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     }
 364:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     else
 365:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
ARM GAS  /tmp/ccBCd4em.s 			page 24


 366:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* No active timer was found.  */
 367:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         *next_timer_tick_ptr = 0;
 368:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         return(TX_FALSE);
 369:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     }
 370:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** }
 326              		.loc 1 370 1 view .LVU96
 327 0062 70BD     		pop	{r4, r5, r6, pc}
 328              	.LVL23:
 329              	.L16:
 367:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         return(TX_FALSE);
 330              		.loc 1 367 9 is_stmt 1 view .LVU97
 367:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         return(TX_FALSE);
 331              		.loc 1 367 30 is_stmt 0 view .LVU98
 332 0064 0020     		movs	r0, #0
 333 0066 CEF80000 		str	r0, [lr]
 368:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     }
 334              		.loc 1 368 9 is_stmt 1 view .LVU99
 368:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     }
 335              		.loc 1 368 15 is_stmt 0 view .LVU100
 336 006a FAE7     		b	.L8
 337              	.L24:
 338              		.align	2
 339              	.L23:
 340 006c 00000000 		.word	_tx_timer_current_ptr
 341 0070 00000000 		.word	_tx_timer_list_end
 342 0074 00000000 		.word	_tx_timer_list_start
 343              		.cfi_endproc
 344              	.LFE10:
 346              		.section	.text.tx_time_increment,"ax",%progbits
 347              		.align	1
 348              		.global	tx_time_increment
 349              		.syntax unified
 350              		.thumb
 351              		.thumb_func
 353              	tx_time_increment:
 354              	.LVL24:
 355              	.LFB11:
 371:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 372:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 373:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
 374:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 375:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  FUNCTION                                               RELEASE        */
 376:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 377:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    tx_time_increment                                   PORTABLE C      */
 378:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                           6.1.5        */
 379:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  AUTHOR                                                                */
 380:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 381:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    William E. Lamie, Microsoft Corporation                             */
 382:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 383:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  DESCRIPTION                                                           */
 384:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 385:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    This function increments the current time by a specified value.     */
 386:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    The value was derived by the application by calling the             */
 387:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    tx_timer_get_next function prior to this call, which was right      */
 388:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    before the processor was put in sleep mode.                         */
 389:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 390:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  INPUT                                                                 */
ARM GAS  /tmp/ccBCd4em.s 			page 25


 391:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 392:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    time_increment                    The amount of time to catch up on */
 393:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 394:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  OUTPUT                                                                */
 395:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 396:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    None                                                                */
 397:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 398:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  CALLS                                                                 */
 399:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 400:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    _tx_timer_system_activate         Timer activate service            */
 401:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 402:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  CALLED BY                                                             */
 403:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 404:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    tx_low_power_exit                                                   */
 405:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 406:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  RELEASE HISTORY                                                       */
 407:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 408:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*    DATE              NAME                      DESCRIPTION             */
 409:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 410:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
 411:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /*                                                                        */
 412:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** /**************************************************************************/
 413:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** VOID  tx_time_increment(ULONG time_increment)
 414:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** {
 356              		.loc 1 414 1 is_stmt 1 view -0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 415:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 416:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** TX_INTERRUPT_SAVE_AREA
 360              		.loc 1 416 1 view .LVU102
 417:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** UINT                        i;
 361              		.loc 1 417 1 view .LVU103
 418:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** TX_TIMER_INTERNAL           **timer_list_head;
 362              		.loc 1 418 1 view .LVU104
 419:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** TX_TIMER_INTERNAL           *next_timer;
 363              		.loc 1 419 1 view .LVU105
 420:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** TX_TIMER_INTERNAL           *temp_list_head;
 364              		.loc 1 420 1 view .LVU106
 421:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 422:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 423:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Determine if there is any time increment.  */
 424:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     if (time_increment == 0)
 365              		.loc 1 424 5 view .LVU107
 366              		.loc 1 424 8 is_stmt 0 view .LVU108
 367 0000 0028     		cmp	r0, #0
 368 0002 5CD0     		beq	.L43
 414:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 369              		.loc 1 414 1 view .LVU109
 370 0004 70B5     		push	{r4, r5, r6, lr}
 371              	.LCFI1:
 372              		.cfi_def_cfa_offset 16
 373              		.cfi_offset 4, -16
 374              		.cfi_offset 5, -12
 375              		.cfi_offset 6, -8
 376              		.cfi_offset 14, -4
 377 0006 0446     		mov	r4, r0
ARM GAS  /tmp/ccBCd4em.s 			page 26


 425:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 426:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Nothing to do, just return.  */
 427:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         return;
 428:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     }
 429:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 430:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Disable interrupts.  */
 431:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     TX_DISABLE
 378              		.loc 1 431 5 is_stmt 1 view .LVU110
 379              	.LBB34:
 380              	.LBI34:
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 381              		.loc 2 578 63 view .LVU111
 382              	.LBB35:
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 383              		.loc 2 580 1 view .LVU112
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 384              		.loc 2 582 5 view .LVU113
 385              	.LBB36:
 386              	.LBI36:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 387              		.loc 2 545 63 view .LVU114
 388              	.LBB37:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 389              		.loc 2 547 1 view .LVU115
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 390              		.loc 2 551 5 view .LVU116
 391              		.syntax unified
 392              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 393 0008 EFF31085 		MRS  r5, PRIMASK 
 394              	@ 0 "" 2
 395              	.LVL25:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 396              		.loc 2 553 5 view .LVU117
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 397              		.loc 2 553 5 is_stmt 0 view .LVU118
 398              		.thumb
 399              		.syntax unified
 400              	.LBE37:
 401              	.LBE36:
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 402              		.loc 2 587 5 is_stmt 1 view .LVU119
 403              		.syntax unified
 404              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 405 000c 72B6     		CPSID i
 406              	@ 0 "" 2
 407              		.loc 2 589 5 view .LVU120
 408              	.LVL26:
 409              		.loc 2 589 5 is_stmt 0 view .LVU121
 410              		.thumb
 411              		.syntax unified
 412              	.LBE35:
 413              	.LBE34:
 432:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 433:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Adjust the system clock.  */
 434:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 414              		.loc 1 434 5 is_stmt 1 view .LVU122
 415              		.loc 1 434 54 is_stmt 0 view .LVU123
ARM GAS  /tmp/ccBCd4em.s 			page 27


 416 000e 2C4A     		ldr	r2, .L51
 417 0010 1368     		ldr	r3, [r2]
 418 0012 0344     		add	r3, r3, r0
 419              		.loc 1 434 28 view .LVU124
 420 0014 1360     		str	r3, [r2]
 435:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 436:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Adjust the time slice variable.  */
 437:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     if (_tx_timer_time_slice)
 421              		.loc 1 437 5 is_stmt 1 view .LVU125
 422              		.loc 1 437 9 is_stmt 0 view .LVU126
 423 0016 2B4B     		ldr	r3, .L51+4
 424 0018 1B68     		ldr	r3, [r3]
 425              		.loc 1 437 8 view .LVU127
 426 001a 23B1     		cbz	r3, .L27
 438:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 439:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Decrement the time-slice variable.  */
 440:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         if (_tx_timer_time_slice > time_increment)
 427              		.loc 1 440 9 is_stmt 1 view .LVU128
 428              		.loc 1 440 12 is_stmt 0 view .LVU129
 429 001c 8342     		cmp	r3, r0
 430 001e 07D9     		bls	.L28
 441:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 442:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 431              		.loc 1 442 13 is_stmt 1 view .LVU130
 432              		.loc 1 442 58 is_stmt 0 view .LVU131
 433 0020 1B1A     		subs	r3, r3, r0
 434              		.loc 1 442 34 view .LVU132
 435 0022 284A     		ldr	r2, .L51+4
 436 0024 1360     		str	r3, [r2]
 437              	.L27:
 443:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 444:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         else
 445:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 446:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             _tx_timer_time_slice =  1;
 447:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 448:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     }
 449:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 450:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Calculate the proper place to position the timer.  */
 451:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     timer_list_head =  _tx_timer_current_ptr;
 438              		.loc 1 451 5 is_stmt 1 view .LVU133
 439              		.loc 1 451 21 is_stmt 0 view .LVU134
 440 0026 284B     		ldr	r3, .L51+8
 441 0028 1968     		ldr	r1, [r3]
 442              	.LVL27:
 452:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 453:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Setup the temporary list pointer.  */
 454:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     temp_list_head =  TX_NULL;
 443              		.loc 1 454 5 is_stmt 1 view .LVU135
 455:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 456:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
 457:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     for (i = 0; i < TX_TIMER_ENTRIES; i++)
 444              		.loc 1 457 5 view .LVU136
 454:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 445              		.loc 1 454 20 is_stmt 0 view .LVU137
 446 002a 0020     		movs	r0, #0
 447              	.LVL28:
 448              		.loc 1 457 12 view .LVU138
ARM GAS  /tmp/ccBCd4em.s 			page 28


 449 002c 8446     		mov	ip, r0
 450              		.loc 1 457 5 view .LVU139
 451 002e 21E0     		b	.L29
 452              	.LVL29:
 453              	.L28:
 446:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 454              		.loc 1 446 13 is_stmt 1 view .LVU140
 446:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 455              		.loc 1 446 34 is_stmt 0 view .LVU141
 456 0030 244B     		ldr	r3, .L51+4
 457 0032 0122     		movs	r2, #1
 458 0034 1A60     		str	r2, [r3]
 459 0036 F6E7     		b	.L27
 460              	.LVL30:
 461              	.L47:
 458:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 459:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Determine if there is a timer list in this entry.  */
 460:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         if (*timer_list_head)
 461:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 462:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* Walk the list and update all the relative times to actual times.  */
 463:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 464:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* Setup the pointer to the expiration list.  */
 465:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             next_timer =  *timer_list_head;
 466:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 467:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* Loop through the timers active for this relative time slot (determined by i).  */
 468:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             do
 469:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             {
 470:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 /* Determine if the remaining time is larger than the list.  */
 471:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 472:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 473:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                     /* Calculate the actual expiration time.  */
 474:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                     next_timer -> tx_timer_internal_remaining_ticks =
 462              		.loc 1 474 21 is_stmt 1 view .LVU142
 475:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                                     next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENT
 463              		.loc 1 475 85 is_stmt 0 view .LVU143
 464 0038 6244     		add	r2, r2, ip
 465              		.loc 1 475 110 view .LVU144
 466 003a 1F3A     		subs	r2, r2, #31
 474:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                                     next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENT
 467              		.loc 1 474 69 view .LVU145
 468 003c 1A60     		str	r2, [r3]
 469              	.L32:
 476:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 477:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 else
 478:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 479:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                     /* Calculate the expiration time, which is simply the number of entries in this
 480:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                     next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 481:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 482:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 483:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 /* Move to the next entry in the timer list.  */
 484:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 next_timer =  next_timer -> tx_timer_internal_active_next;
 470              		.loc 1 484 17 is_stmt 1 view .LVU146
 471              		.loc 1 484 28 is_stmt 0 view .LVU147
 472 003e 1B69     		ldr	r3, [r3, #16]
 473              	.LVL31:
 485:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 486:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             } while (next_timer != *timer_list_head);
ARM GAS  /tmp/ccBCd4em.s 			page 29


 474              		.loc 1 486 33 is_stmt 1 view .LVU148
 475              		.loc 1 486 36 is_stmt 0 view .LVU149
 476 0040 0A68     		ldr	r2, [r1]
 477              		.loc 1 486 33 view .LVU150
 478 0042 9A42     		cmp	r2, r3
 479 0044 06D0     		beq	.L46
 480              	.LVL32:
 481              	.L33:
 468:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             {
 482              		.loc 1 468 13 is_stmt 1 view .LVU151
 471:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 483              		.loc 1 471 17 view .LVU152
 471:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 484              		.loc 1 471 32 is_stmt 0 view .LVU153
 485 0046 1A68     		ldr	r2, [r3]
 471:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 {
 486              		.loc 1 471 20 view .LVU154
 487 0048 202A     		cmp	r2, #32
 488 004a F5D8     		bhi	.L47
 480:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 489              		.loc 1 480 21 is_stmt 1 view .LVU155
 480:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 490              		.loc 1 480 74 is_stmt 0 view .LVU156
 491 004c 0CF10102 		add	r2, ip, #1
 480:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 }
 492              		.loc 1 480 69 view .LVU157
 493 0050 1A60     		str	r2, [r3]
 494 0052 F4E7     		b	.L32
 495              	.L46:
 487:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 488:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* NULL terminate the current timer list.  */
 489:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_n
 496              		.loc 1 489 13 is_stmt 1 view .LVU158
 497              		.loc 1 489 33 is_stmt 0 view .LVU159
 498 0054 5369     		ldr	r3, [r2, #20]
 499              	.LVL33:
 500              		.loc 1 489 104 view .LVU160
 501 0056 0022     		movs	r2, #0
 502 0058 1A61     		str	r2, [r3, #16]
 490:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 491:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* Yes, determine if the temporary list is NULL.  */
 492:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             if (temp_list_head == TX_NULL)
 503              		.loc 1 492 13 is_stmt 1 view .LVU161
 504              		.loc 1 492 16 is_stmt 0 view .LVU162
 505 005a 38B1     		cbz	r0, .L48
 493:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             {
 494:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 /* First item on the list.  Move the entire linked list.  */
 495:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 temp_list_head =  *timer_list_head;
 496:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             }
 497:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             else
 498:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             {
 499:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 /* No, the temp list already has timers on it. Link the next timer list to the end.
 500:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_n
 506              		.loc 1 500 17 is_stmt 1 view .LVU163
 507              		.loc 1 500 33 is_stmt 0 view .LVU164
 508 005c 4269     		ldr	r2, [r0, #20]
 509              		.loc 1 500 107 view .LVU165
ARM GAS  /tmp/ccBCd4em.s 			page 30


 510 005e 0B68     		ldr	r3, [r1]
 511              		.loc 1 500 104 view .LVU166
 512 0060 1361     		str	r3, [r2, #16]
 501:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 502:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 /* Now update the previous to the new list's previous timer pointer.  */
 503:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****                 temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_tim
 513              		.loc 1 503 17 is_stmt 1 view .LVU167
 514              		.loc 1 503 91 is_stmt 0 view .LVU168
 515 0062 5B69     		ldr	r3, [r3, #20]
 516              		.loc 1 503 69 view .LVU169
 517 0064 4361     		str	r3, [r0, #20]
 518              	.L35:
 504:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             }
 505:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 506:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* Now clear the current timer head pointer.  */
 507:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             *timer_list_head =  TX_NULL;
 519              		.loc 1 507 13 is_stmt 1 view .LVU170
 520              		.loc 1 507 30 is_stmt 0 view .LVU171
 521 0066 0023     		movs	r3, #0
 522 0068 0B60     		str	r3, [r1]
 523 006a 09E0     		b	.L30
 524              	.L48:
 495:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             }
 525              		.loc 1 495 17 is_stmt 1 view .LVU172
 495:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             }
 526              		.loc 1 495 32 is_stmt 0 view .LVU173
 527 006c 0868     		ldr	r0, [r1]
 528              	.LVL34:
 495:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             }
 529              		.loc 1 495 32 view .LVU174
 530 006e FAE7     		b	.L35
 531              	.LVL35:
 532              	.L36:
 457:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 533              		.loc 1 457 40 is_stmt 1 discriminator 2 view .LVU175
 534 0070 0CF1010C 		add	ip, ip, #1
 535              	.LVL36:
 536              	.L29:
 457:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 537              		.loc 1 457 19 discriminator 1 view .LVU176
 538 0074 BCF11F0F 		cmp	ip, #31
 539 0078 0AD8     		bhi	.L49
 460:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 540              		.loc 1 460 9 view .LVU177
 460:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 541              		.loc 1 460 13 is_stmt 0 view .LVU178
 542 007a 0B68     		ldr	r3, [r1]
 460:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 543              		.loc 1 460 12 view .LVU179
 544 007c 002B     		cmp	r3, #0
 545 007e E2D1     		bne	.L33
 546              	.L30:
 508:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 509:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         
 510:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Move to next timer entry.  */
 511:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         timer_list_head++;
 547              		.loc 1 511 9 is_stmt 1 view .LVU180
ARM GAS  /tmp/ccBCd4em.s 			page 31


 548              		.loc 1 511 24 is_stmt 0 view .LVU181
 549 0080 0431     		adds	r1, r1, #4
 550              	.LVL37:
 512:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 513:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Determine if a wrap around condition has occurred.  */
 514:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         if (timer_list_head >= _tx_timer_list_end)
 551              		.loc 1 514 9 is_stmt 1 view .LVU182
 552              		.loc 1 514 29 is_stmt 0 view .LVU183
 553 0082 124B     		ldr	r3, .L51+12
 554 0084 1B68     		ldr	r3, [r3]
 555              		.loc 1 514 12 view .LVU184
 556 0086 8B42     		cmp	r3, r1
 557 0088 F2D8     		bhi	.L36
 515:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 516:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* Wrap from the beginning of the list.  */
 517:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             timer_list_head =  _tx_timer_list_start;
 558              		.loc 1 517 13 is_stmt 1 view .LVU185
 559              		.loc 1 517 29 is_stmt 0 view .LVU186
 560 008a 114B     		ldr	r3, .L51+16
 561 008c 1968     		ldr	r1, [r3]
 562              	.LVL38:
 563              		.loc 1 517 29 view .LVU187
 564 008e EFE7     		b	.L36
 565              	.L49:
 518:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 519:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     }
 520:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 521:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Set the current timer pointer to the beginning of the list.  */
 522:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     _tx_timer_current_ptr =  _tx_timer_list_start;
 566              		.loc 1 522 5 is_stmt 1 view .LVU188
 567              		.loc 1 522 27 is_stmt 0 view .LVU189
 568 0090 0F4B     		ldr	r3, .L51+16
 569 0092 1A68     		ldr	r2, [r3]
 570 0094 0C4B     		ldr	r3, .L51+8
 571 0096 1A60     		str	r2, [r3]
 523:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 524:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Loop to update and reinsert all the timers in the list.  */
 525:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     while (temp_list_head)
 572              		.loc 1 525 5 is_stmt 1 view .LVU190
 573              		.loc 1 525 11 is_stmt 0 view .LVU191
 574 0098 06E0     		b	.L38
 575              	.LVL39:
 576              	.L39:
 526:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 527:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Pickup the next timer to update and reinsert.  */
 528:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         next_timer =  temp_list_head;
 529:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 530:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Move the temp list head pointer to the next pointer.  */
 531:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         temp_list_head =  next_timer -> tx_timer_internal_active_next;
 532:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 533:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Determine if the remaining time is greater than the time increment
 534:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****            value - this is the normal case.  */
 535:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 536:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 537:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* Decrement the elapsed time.  */
 538:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_rema
 539:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
ARM GAS  /tmp/ccBCd4em.s 			page 32


 540:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         else
 541:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 542:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             /* Simply set the expiration value to expire on the next tick.  */
 543:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****             next_timer -> tx_timer_internal_remaining_ticks =  1;
 577              		.loc 1 543 13 is_stmt 1 view .LVU192
 578              		.loc 1 543 61 is_stmt 0 view .LVU193
 579 009a 0123     		movs	r3, #1
 580 009c 0360     		str	r3, [r0]
 581              	.L40:
 544:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 545:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 546:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Now clear the timer list head pointer for the timer activate function to work properly. 
 547:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         next_timer -> tx_timer_internal_list_head =  TX_NULL;
 582              		.loc 1 547 9 is_stmt 1 view .LVU194
 583              		.loc 1 547 51 is_stmt 0 view .LVU195
 584 009e 0023     		movs	r3, #0
 585 00a0 8361     		str	r3, [r0, #24]
 548:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 549:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         /* Now re-insert the timer into the list.  */
 550:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         _tx_timer_system_activate(next_timer);
 586              		.loc 1 550 9 is_stmt 1 view .LVU196
 587 00a2 FFF7FEFF 		bl	_tx_timer_system_activate
 588              	.LVL40:
 531:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 589              		.loc 1 531 24 is_stmt 0 view .LVU197
 590 00a6 3046     		mov	r0, r6
 591              	.LVL41:
 592              	.L38:
 525:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     {
 593              		.loc 1 525 12 is_stmt 1 view .LVU198
 594 00a8 30B1     		cbz	r0, .L50
 528:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 595              		.loc 1 528 9 view .LVU199
 596              	.LVL42:
 531:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 597              		.loc 1 531 9 view .LVU200
 531:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 598              		.loc 1 531 24 is_stmt 0 view .LVU201
 599 00aa 0669     		ldr	r6, [r0, #16]
 600              	.LVL43:
 535:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 601              		.loc 1 535 9 is_stmt 1 view .LVU202
 535:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 602              		.loc 1 535 24 is_stmt 0 view .LVU203
 603 00ac 0368     		ldr	r3, [r0]
 535:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         {
 604              		.loc 1 535 12 view .LVU204
 605 00ae A342     		cmp	r3, r4
 606 00b0 F3D9     		bls	.L39
 538:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 607              		.loc 1 538 13 is_stmt 1 view .LVU205
 538:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 608              		.loc 1 538 112 is_stmt 0 view .LVU206
 609 00b2 1B1B     		subs	r3, r3, r4
 538:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****         }
 610              		.loc 1 538 61 view .LVU207
 611 00b4 0360     		str	r3, [r0]
ARM GAS  /tmp/ccBCd4em.s 			page 33


 612 00b6 F2E7     		b	.L40
 613              	.LVL44:
 614              	.L50:
 551:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     }
 552:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** 
 553:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     /* Restore interrupts.  */
 554:Middlewares/ST/threadx/utility/low_power/tx_low_power.c ****     TX_RESTORE
 615              		.loc 1 554 5 is_stmt 1 view .LVU208
 616              	.LBB38:
 617              	.LBI38:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 618              		.loc 2 568 55 view .LVU209
 619              	.LBB39:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 620              		.loc 2 574 5 view .LVU210
 621              		.syntax unified
 622              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 623 00b8 85F31088 		MSR  PRIMASK,r5
 624              	@ 0 "" 2
 625              	.LVL45:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 626              		.loc 2 574 5 is_stmt 0 view .LVU211
 627              		.thumb
 628              		.syntax unified
 629              	.LBE39:
 630              	.LBE38:
 555:Middlewares/ST/threadx/utility/low_power/tx_low_power.c **** }
 631              		.loc 1 555 1 view .LVU212
 632 00bc 70BD     		pop	{r4, r5, r6, pc}
 633              	.LVL46:
 634              	.L43:
 635              	.LCFI2:
 636              		.cfi_def_cfa_offset 0
 637              		.cfi_restore 4
 638              		.cfi_restore 5
 639              		.cfi_restore 6
 640              		.cfi_restore 14
 641              		.loc 1 555 1 view .LVU213
 642 00be 7047     		bx	lr
 643              	.L52:
 644              		.align	2
 645              	.L51:
 646 00c0 00000000 		.word	_tx_timer_system_clock
 647 00c4 00000000 		.word	_tx_timer_time_slice
 648 00c8 00000000 		.word	_tx_timer_current_ptr
 649 00cc 00000000 		.word	_tx_timer_list_end
 650 00d0 00000000 		.word	_tx_timer_list_start
 651              		.cfi_endproc
 652              	.LFE11:
 654              		.global	tx_low_power_entered
 655              		.section	.bss.tx_low_power_entered,"aw",%nobits
 656              		.align	2
 659              	tx_low_power_entered:
 660 0000 00000000 		.space	4
 661              		.text
 662              	.Letext0:
 663              		.file 3 "Middlewares/ST/threadx/common/inc/tx_api.h"
ARM GAS  /tmp/ccBCd4em.s 			page 34


 664              		.file 4 "Middlewares/ST/threadx/common/inc/tx_timer.h"
ARM GAS  /tmp/ccBCd4em.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 tx_low_power.c
     /tmp/ccBCd4em.s:20     .text.tx_low_power_enter:00000000 $t
     /tmp/ccBCd4em.s:26     .text.tx_low_power_enter:00000000 tx_low_power_enter
     /tmp/ccBCd4em.s:98     .text.tx_low_power_enter:00000014 $d
     /tmp/ccBCd4em.s:659    .bss.tx_low_power_entered:00000000 tx_low_power_entered
     /tmp/ccBCd4em.s:103    .text.tx_low_power_exit:00000000 $t
     /tmp/ccBCd4em.s:109    .text.tx_low_power_exit:00000000 tx_low_power_exit
     /tmp/ccBCd4em.s:137    .text.tx_low_power_exit:00000010 $d
     /tmp/ccBCd4em.s:142    .text.tx_timer_get_next:00000000 $t
     /tmp/ccBCd4em.s:148    .text.tx_timer_get_next:00000000 tx_timer_get_next
     /tmp/ccBCd4em.s:340    .text.tx_timer_get_next:0000006c $d
     /tmp/ccBCd4em.s:347    .text.tx_time_increment:00000000 $t
     /tmp/ccBCd4em.s:353    .text.tx_time_increment:00000000 tx_time_increment
     /tmp/ccBCd4em.s:646    .text.tx_time_increment:000000c0 $d
     /tmp/ccBCd4em.s:656    .bss.tx_low_power_entered:00000000 $d

UNDEFINED SYMBOLS
_tx_timer_current_ptr
_tx_timer_list_end
_tx_timer_list_start
_tx_timer_system_activate
_tx_timer_system_clock
_tx_timer_time_slice
