ARM GAS  /tmp/cc2Ngwvl.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"tx_timer_info_get.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Middlewares/ST/threadx/common/src/tx_timer_info_get.c"
  19              		.section	.text._tx_timer_info_get,"ax",%progbits
  20              		.align	1
  21              		.global	_tx_timer_info_get
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_tx_timer_info_get:
  27              	.LVL0:
  28              	.LFB8:
   1:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /**************************************************************************/
   2:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
   3:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
   5:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  10:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /**************************************************************************/
  11:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  12:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  13:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /**************************************************************************/
  14:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /**************************************************************************/
  15:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /**                                                                       */
  16:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /**                                                                       */
  18:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /**   Timer                                                               */
  19:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /**                                                                       */
  20:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /**************************************************************************/
  21:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /**************************************************************************/
  22:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  23:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** #define TX_SOURCE_CODE
  24:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  25:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  26:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /* Include necessary system files.  */
  27:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  28:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** #include "tx_api.h"
  29:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** #include "tx_trace.h"
  30:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** #include "tx_timer.h"
ARM GAS  /tmp/cc2Ngwvl.s 			page 2


  31:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  32:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  33:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /**************************************************************************/
  34:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  35:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*  FUNCTION                                               RELEASE        */
  36:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  37:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    _tx_timer_info_get                                  PORTABLE C      */
  38:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                           6.1          */
  39:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*  AUTHOR                                                                */
  40:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  41:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    William E. Lamie, Microsoft Corporation                             */
  42:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  43:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*  DESCRIPTION                                                           */
  44:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  45:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    This function retrieves information from the specified timer.       */
  46:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  47:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*  INPUT                                                                 */
  48:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  49:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    timer_ptr                         Pointer to timer control block    */
  50:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    name                              Destination for the timer name    */
  51:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    active                            Destination for active flag       */
  52:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    remaining_ticks                   Destination for remaining ticks   */
  53:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                        before expiration               */
  54:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    reschedule_ticks                  Destination for reschedule ticks  */
  55:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    next_timer                        Destination for next timer on the */
  56:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                        created list                    */
  57:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  58:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*  OUTPUT                                                                */
  59:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  60:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    status                            Completion status                 */
  61:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  62:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*  CALLS                                                                 */
  63:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  64:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    None                                                                */
  65:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  66:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*  CALLED BY                                                             */
  67:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  68:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    Application Code                                                    */
  69:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  70:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*  RELEASE HISTORY                                                       */
  71:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  72:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*    DATE              NAME                      DESCRIPTION             */
  73:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  74:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  75:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  76:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                            resulting in version 6.1    */
  77:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /*                                                                        */
  78:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** /**************************************************************************/
  79:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** UINT  _tx_timer_info_get(TX_TIMER *timer_ptr, CHAR **name, UINT *active, ULONG *remaining_ticks,
  80:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 ULONG *reschedule_ticks, TX_TIMER **next_timer)
  81:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** {
  29              		.loc 1 81 1 view -0
  30              		.cfi_startproc
  31              		@ args = 8, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 81 1 is_stmt 0 view .LVU1
  34 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/cc2Ngwvl.s 			page 3


  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 24
  37              		.cfi_offset 4, -24
  38              		.cfi_offset 5, -20
  39              		.cfi_offset 6, -16
  40              		.cfi_offset 7, -12
  41              		.cfi_offset 8, -8
  42              		.cfi_offset 14, -4
  43 0004 069E     		ldr	r6, [sp, #24]
  44 0006 079D     		ldr	r5, [sp, #28]
  82:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  83:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** TX_INTERRUPT_SAVE_AREA
  45              		.loc 1 83 1 is_stmt 1 view .LVU2
  84:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  85:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** TX_TIMER_INTERNAL   *internal_ptr;
  46              		.loc 1 85 1 view .LVU3
  86:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** TX_TIMER_INTERNAL   **list_head;
  47              		.loc 1 86 1 view .LVU4
  87:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** ULONG               ticks_left;
  48              		.loc 1 87 1 view .LVU5
  88:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** UINT                timer_active;
  49              		.loc 1 88 1 view .LVU6
  89:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** UINT                active_timer_list;
  50              		.loc 1 89 1 view .LVU7
  90:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  91:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  92:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Disable interrupts.  */
  93:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     TX_DISABLE
  51              		.loc 1 93 5 view .LVU8
  52              	.LBB10:
  53              	.LBI10:
  54              		.file 2 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h"
   1:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
   2:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   3:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   5:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  10:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  11:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  12:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  13:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  14:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  15:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  16:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  18:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  20:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  21:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  22:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  23:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  24:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  25:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
ARM GAS  /tmp/cc2Ngwvl.s 			page 4


  26:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  28:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M7/GNU     */
  29:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                           6.1.12       */
  30:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  31:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  33:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  35:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  37:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  46:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  49:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  51:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  53:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  04-25-2022      Scott Larson            Modified comments and added   */
  60:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            volatile to registers,      */
  61:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.11 */
  62:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  07-29-2022      Scott Larson            Modified comments and         */
  63:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            described BASEPRI usage,    */
  64:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.12 */
  65:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  66:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  67:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  68:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  69:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_H
  70:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  71:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  72:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  73:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  74:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  75:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  76:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  77:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  78:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  79:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_user.h"
  80:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  81:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  82:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/cc2Ngwvl.s 			page 5


  83:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  84:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  85:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <stdlib.h>
  86:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <string.h>
  87:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  88:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  89:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  90:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  91:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  92:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <yvals.h>
  93:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  94:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  95:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  96:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
  97:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  98:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  99:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 100:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 101:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 102:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
 103:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
 104:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
 105:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 106:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 107:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef __GNUC__
 108:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 109:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 110:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 111:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 112:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 113:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define VOID                                    void
 114:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 115:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 116:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef int                                     INT;
 117:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 118:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef long                                    LONG;
 119:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 120:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 121:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 122:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 123:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 124:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 125:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 126:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 127:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 128:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 129:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 130:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 131:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 132:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 133:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 134:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 135:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 136:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 137:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 138:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 139:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/cc2Ngwvl.s 			page 6


 140:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 141:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 142:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 143:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 144:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 145:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 146:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 147:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 148:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 149:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 150:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 151:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 152:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* By default, ThreadX for Cortex-M uses the PRIMASK register to enable/disable interrupts.
 153:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** If using BASEPRI is desired, define the following two symbols for both c and assembly files:
 154:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_USE_BASEPRI - This tells ThreadX to use BASEPRI instead of PRIMASK.
 155:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_BASEPRI = (priority_mask << (8 - number_priority_bits)) - this defines the maximum priority
 156:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** Any interrupt with a higher priority than priority_mask will not be masked, thus the interrupt will
 157:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 158:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 159:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 160:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 161:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 162:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 163:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 164:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 165:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 166:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 167:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    source constants would be:
 168:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 169:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0x0a800024)
 170:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 171:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 172:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 173:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 174:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 175:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 176:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0xE0001004)
 177:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 178:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 179:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 180:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 181:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 182:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 183:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 184:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 185:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 186:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 187:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
 188:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 189:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 190:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 191:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 192:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 193:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 194:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 195:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 196:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
ARM GAS  /tmp/cc2Ngwvl.s 			page 7


 197:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 198:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 199:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 200:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 201:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 202:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 203:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 204:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 205:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 206:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 207:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 208:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 209:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 210:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    a function call.  */
 211:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 212:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 213:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 214:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 215:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 216:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 217:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 218:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 219:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 220:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 221:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 222:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 223:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    logic.  */
 224:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 225:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 226:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 227:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 228:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 229:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 230:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 231:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 232:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 233:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 234:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 235:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 236:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 237:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 238:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 239:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 240:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 241:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 242:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 243:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 244:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 245:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 246:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 247:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 248:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 249:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 250:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 251:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 252:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 253:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
ARM GAS  /tmp/cc2Ngwvl.s 			page 8


 254:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 255:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 256:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 257:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 258:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 259:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 260:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 261:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 262:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 263:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 264:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 265:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 266:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 267:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 268:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 269:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 270:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 271:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 272:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 273:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 274:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 275:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 276:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 277:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 278:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 279:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 280:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 281:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 282:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 283:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 284:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 285:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 286:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 287:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 288:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 289:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 290:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 291:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 292:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 293:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 294:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 295:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 296:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 297:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 298:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 299:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 300:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 301:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 302:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 303:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 304:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 305:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 306:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 307:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 308:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 309:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 310:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/cc2Ngwvl.s 			page 9


 311:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 312:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 313:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 314:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 315:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 316:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 317:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 318:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 319:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 320:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 321:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 322:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 323:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 324:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 325:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 326:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 327:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 328:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 329:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 330:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 331:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 332:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 333:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 334:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 335:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 336:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 337:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 338:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 339:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 340:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 341:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 342:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 343:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 344:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 345:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 346:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 347:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 348:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 349:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 350:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 351:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 352:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 353:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 354:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 355:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 356:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 357:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 358:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 359:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 360:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 361:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 362:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 363:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 364:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 365:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 366:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 367:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
ARM GAS  /tmp/cc2Ngwvl.s 			page 10


 368:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 369:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 370:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 371:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 372:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 373:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 374:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 375:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 376:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 377:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 378:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 379:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 380:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 381:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 382:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 383:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 384:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 385:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 386:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 387:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 388:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 389:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 390:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 391:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 392:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 393:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((volatile ULONG *) 0xE00
 394:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 395:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 396:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 397:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 398:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 399:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 400:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 401:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 402:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 403:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 404:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 405:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 406:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 407:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 408:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 409:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 410:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 411:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 412:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 413:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 414:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 415:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 416:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 417:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 418:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 419:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 420:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 421:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 422:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 423:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 424:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
ARM GAS  /tmp/cc2Ngwvl.s 			page 11


 425:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 426:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 427:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 428:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 429:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 430:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 431:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 432:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 433:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 434:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 435:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 436:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 437:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 438:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 439:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 440:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 441:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 442:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 443:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 444:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 445:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 446:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 447:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 448:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 449:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 450:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 451:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 452:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 453:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 454:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 455:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 456:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 457:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 458:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 459:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 460:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 461:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 462:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 463:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 464:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 465:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 466:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 467:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 468:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 469:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 470:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 471:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 472:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 473:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 474:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 475:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 476:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 477:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 478:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 479:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 480:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 481:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
ARM GAS  /tmp/cc2Ngwvl.s 			page 12


 482:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 483:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 484:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 485:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 486:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 487:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 488:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 489:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 490:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(ipsr_value);
 491:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 492:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 493:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 494:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 495:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 496:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 497:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 498:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 499:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 500:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 501:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 502:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 503:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 504:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 505:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 506:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 507:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 508:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 509:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 510:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 511:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 512:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 513:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 514:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 515:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 516:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 517:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 518:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 519:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 520:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 521:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 522:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 523:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 524:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 525:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 526:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 527:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 528:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 529:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 530:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 531:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 532:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 533:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 534:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 535:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 536:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 537:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 538:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/cc2Ngwvl.s 			page 13


 539:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 540:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 541:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 542:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 543:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 544:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 546:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int posture;
 548:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 549:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 550:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 552:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(posture);
 554:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 555:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 556:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 557:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 558:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 559:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 560:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 561:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 562:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 563:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 564:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 565:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 566:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 567:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 569:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 570:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 571:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 572:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 573:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 575:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 576:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 577:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  55              		.loc 2 578 63 view .LVU9
  56              	.LBB11:
 579:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int int_posture;
  57              		.loc 2 580 1 view .LVU10
 581:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  58              		.loc 2 582 5 view .LVU11
  59              	.LBB12:
  60              	.LBI12:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
  61              		.loc 2 545 63 view .LVU12
  62              	.LBB13:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  63              		.loc 2 547 1 view .LVU13
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  64              		.loc 2 551 5 view .LVU14
ARM GAS  /tmp/cc2Ngwvl.s 			page 14


  65              		.syntax unified
  66              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  67 0008 EFF3108C 		MRS  ip, PRIMASK 
  68              	@ 0 "" 2
  69              	.LVL1:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  70              		.loc 2 553 5 view .LVU15
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  71              		.loc 2 553 5 is_stmt 0 view .LVU16
  72              		.thumb
  73              		.syntax unified
  74              	.LBE13:
  75              	.LBE12:
 583:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 584:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 585:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 586:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  76              		.loc 2 587 5 is_stmt 1 view .LVU17
  77              		.syntax unified
  78              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  79 000c 72B6     		CPSID i
  80              	@ 0 "" 2
 588:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 589:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(int_posture);
  81              		.loc 2 589 5 view .LVU18
  82              	.LVL2:
  83              		.loc 2 589 5 is_stmt 0 view .LVU19
  84              		.thumb
  85              		.syntax unified
  86              	.LBE11:
  87              	.LBE10:
  94:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  95:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
  96:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIMER_INFO_GET, timer_ptr, TX_POINTER_TO_ULONG_CONVERT(&ticks_
  97:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
  98:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Log this kernel call.  */
  99:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     TX_EL_TIMER_INFO_GET_INSERT
 100:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 101:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Retrieve the name of the timer.  */
 102:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     if (name != TX_NULL)
  88              		.loc 1 102 5 is_stmt 1 view .LVU20
  89              		.loc 1 102 8 is_stmt 0 view .LVU21
  90 000e 09B1     		cbz	r1, .L2
 103:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     {
 104:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 105:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         *name =  timer_ptr -> tx_timer_name;
  91              		.loc 1 105 9 is_stmt 1 view .LVU22
  92              		.loc 1 105 28 is_stmt 0 view .LVU23
  93 0010 4468     		ldr	r4, [r0, #4]
  94              		.loc 1 105 15 view .LVU24
  95 0012 0C60     		str	r4, [r1]
  96              	.L2:
 106:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     }
 107:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 108:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Pickup address of internal timer structure.  */
 109:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     internal_ptr =  &(timer_ptr -> tx_timer_internal);
ARM GAS  /tmp/cc2Ngwvl.s 			page 15


  97              		.loc 1 109 5 is_stmt 1 view .LVU25
  98              		.loc 1 109 18 is_stmt 0 view .LVU26
  99 0014 00F1080E 		add	lr, r0, #8
 100              	.LVL3:
 110:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 111:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Retrieve all the pertinent information and return it in the supplied
 112:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****        destinations.  */
 113:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 114:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Default active to false.  */
 115:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     timer_active =  TX_FALSE;
 101              		.loc 1 115 5 is_stmt 1 view .LVU27
 116:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 117:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Default the ticks left to the remaining ticks.  */
 118:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     ticks_left =  internal_ptr -> tx_timer_internal_remaining_ticks;
 102              		.loc 1 118 5 view .LVU28
 103              		.loc 1 118 16 is_stmt 0 view .LVU29
 104 0018 8468     		ldr	r4, [r0, #8]
 105              	.LVL4:
 119:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 120:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Determine if the timer is still active.  */
 121:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     if (internal_ptr -> tx_timer_internal_list_head != TX_NULL)
 106              		.loc 1 121 5 is_stmt 1 view .LVU30
 107              		.loc 1 121 22 is_stmt 0 view .LVU31
 108 001a 016A     		ldr	r1, [r0, #32]
 109              	.LVL5:
 110              		.loc 1 121 8 view .LVU32
 111 001c 69B3     		cbz	r1, .L11
 122:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     {
 123:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 124:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         /* Indicate this timer is active.  */
 125:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         timer_active =  TX_TRUE;
 112              		.loc 1 125 9 is_stmt 1 view .LVU33
 113              	.LVL6:
 126:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 127:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         /* Default the active timer list flag to false.  */
 128:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         active_timer_list =  TX_FALSE;
 114              		.loc 1 128 9 view .LVU34
 129:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 130:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         /* Determine if the timer is still active.  */
 131:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         if (internal_ptr -> tx_timer_internal_list_head >= _tx_timer_list_start)
 115              		.loc 1 131 9 view .LVU35
 116              		.loc 1 131 57 is_stmt 0 view .LVU36
 117 001e 234F     		ldr	r7, .L16
 118 0020 D7F80080 		ldr	r8, [r7]
 119              		.loc 1 131 12 view .LVU37
 120 0024 4145     		cmp	r1, r8
 121 0026 1FD3     		bcc	.L4
 132:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         {
 133:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 134:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             /* Determine if the list head is before the end of the list.  */
 135:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             if (internal_ptr -> tx_timer_internal_list_head < _tx_timer_list_end)
 122              		.loc 1 135 13 is_stmt 1 view .LVU38
 123              		.loc 1 135 61 is_stmt 0 view .LVU39
 124 0028 214F     		ldr	r7, .L16+4
 125 002a 3F68     		ldr	r7, [r7]
 126              		.loc 1 135 16 view .LVU40
 127 002c B942     		cmp	r1, r7
ARM GAS  /tmp/cc2Ngwvl.s 			page 16


 128 002e 1BD2     		bcs	.L4
 136:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             {
 137:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 138:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 /* This timer is active and has not yet expired.  */
 139:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 active_timer_list =  TX_TRUE;
 129              		.loc 1 139 17 is_stmt 1 view .LVU41
 130              	.LVL7:
 140:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 141:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         }
 142:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 143:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         /* Determine if the timer is on the active timer list.  */
 144:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         if (active_timer_list == TX_TRUE)
 131              		.loc 1 144 9 view .LVU42
 145:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         {
 146:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 147:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             /* Calculate the amount of time that has elapsed since the timer
 148:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                was activated.  */
 149:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 150:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             /* Setup the list head pointer.  */
 151:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             list_head =  internal_ptr -> tx_timer_internal_list_head;
 132              		.loc 1 151 13 view .LVU43
 152:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 153:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             /* Is this timer's entry after the current timer pointer?  */
 154:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             if (internal_ptr -> tx_timer_internal_list_head >= _tx_timer_current_ptr)
 133              		.loc 1 154 13 view .LVU44
 134              		.loc 1 154 61 is_stmt 0 view .LVU45
 135 0030 DFF884E0 		ldr	lr, .L16+12
 136              	.LVL8:
 137              		.loc 1 154 61 view .LVU46
 138 0034 DEF800E0 		ldr	lr, [lr]
 139              		.loc 1 154 16 view .LVU47
 140 0038 7145     		cmp	r1, lr
 141 003a 0CD3     		bcc	.L5
 155:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             {
 156:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 157:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 /* Calculate ticks left to expiration - just the difference between this
 158:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                    timer's entry and the current timer pointer.  */
 159:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 ticks_left =  ((TX_TIMER_POINTER_DIF(list_head, _tx_timer_current_ptr)) + ((ULONG) 
 142              		.loc 1 159 17 is_stmt 1 view .LVU48
 143              		.loc 1 159 33 is_stmt 0 view .LVU49
 144 003c A1EB0E0E 		sub	lr, r1, lr
 145 0040 4FEAAE0E 		asr	lr, lr, #2
 146              		.loc 1 159 28 view .LVU50
 147 0044 0EF10101 		add	r1, lr, #1
 148              	.LVL9:
 149              	.L6:
 160:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 161:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             else
 162:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             {
 163:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 164:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 /* Calculate the ticks left with a wrapped list condition.  */
 165:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 ticks_left =  ((TX_TIMER_POINTER_DIF(list_head, _tx_timer_list_start)));
 166:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 167:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 ticks_left =  ticks_left + ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_cur
 168:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 169:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 170:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             /* Adjust the remaining ticks accordingly.  */
ARM GAS  /tmp/cc2Ngwvl.s 			page 17


 171:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 150              		.loc 1 171 13 is_stmt 1 view .LVU51
 151              		.loc 1 171 16 is_stmt 0 view .LVU52
 152 0048 202C     		cmp	r4, #32
 153 004a 26D9     		bls	.L12
 172:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             {
 173:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 174:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 /* Subtract off the last full pass through the timer list and add the
 175:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                    time left.  */
 176:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 ticks_left =  (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES
 154              		.loc 1 176 17 is_stmt 1 view .LVU53
 155              		.loc 1 176 102 is_stmt 0 view .LVU54
 156 004c 2144     		add	r1, r1, r4
 157              	.LVL10:
 158              		.loc 1 176 28 view .LVU55
 159 004e A1F12004 		sub	r4, r1, #32
 160              	.LVL11:
 125:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 161              		.loc 1 125 22 view .LVU56
 162 0052 0121     		movs	r1, #1
 163 0054 12E0     		b	.L3
 164              	.LVL12:
 165              	.L5:
 165:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 166              		.loc 1 165 17 is_stmt 1 view .LVU57
 165:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 167              		.loc 1 165 33 is_stmt 0 view .LVU58
 168 0056 A1EB0801 		sub	r1, r1, r8
 169              	.LVL13:
 167:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 170              		.loc 1 167 17 is_stmt 1 view .LVU59
 167:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 171              		.loc 1 167 46 is_stmt 0 view .LVU60
 172 005a A7EB0E07 		sub	r7, r7, lr
 173 005e BF10     		asrs	r7, r7, #2
 167:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 174              		.loc 1 167 42 view .LVU61
 175 0060 07EBA101 		add	r1, r7, r1, asr #2
 176              	.LVL14:
 167:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 177              		.loc 1 167 28 view .LVU62
 178 0064 0131     		adds	r1, r1, #1
 179              	.LVL15:
 167:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 180              		.loc 1 167 28 view .LVU63
 181 0066 EFE7     		b	.L6
 182              	.LVL16:
 183              	.L4:
 177:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 178:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 179:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         }
 180:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         else
 181:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         {
 182:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 183:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             /* The timer is not on the actual timer list so it must either be being processed
 184:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                or on a temporary list to be processed.   */
 185:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
ARM GAS  /tmp/cc2Ngwvl.s 			page 18


 186:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             /* Check to see if this timer is the timer currently being processed.  */
 187:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             if (_tx_timer_expired_timer_ptr == internal_ptr)
 184              		.loc 1 187 13 is_stmt 1 view .LVU64
 185              		.loc 1 187 45 is_stmt 0 view .LVU65
 186 0068 1249     		ldr	r1, .L16+8
 187 006a 0968     		ldr	r1, [r1]
 188              		.loc 1 187 16 view .LVU66
 189 006c 7145     		cmp	r1, lr
 190 006e 17D0     		beq	.L13
 188:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             {
 189:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 190:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 /* Timer dispatch routine is executing, waiting to execute, or just finishing. No m
 191:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 ticks_left =  ((ULONG) 0);
 192:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 193:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             else
 194:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             {
 195:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 196:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 /* Timer is not the one being processed, which means it must be on the temporary ex
 197:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                    waiting to be processed.  */
 198:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 199:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 /* Calculate the remaining ticks for a timer in the process of expiring.  */
 200:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 if (ticks_left > TX_TIMER_ENTRIES)
 191              		.loc 1 200 17 is_stmt 1 view .LVU67
 192              		.loc 1 200 20 is_stmt 0 view .LVU68
 193 0070 202C     		cmp	r4, #32
 194 0072 18D9     		bls	.L14
 201:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 {
 202:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 203:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                     /* Calculate the number of ticks remaining.  */
 204:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                     ticks_left =  internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTR
 195              		.loc 1 204 21 is_stmt 1 view .LVU69
 196              		.loc 1 204 32 is_stmt 0 view .LVU70
 197 0074 203C     		subs	r4, r4, #32
 198              	.LVL17:
 125:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 199              		.loc 1 125 22 view .LVU71
 200 0076 0121     		movs	r1, #1
 201 0078 00E0     		b	.L3
 202              	.LVL18:
 203              	.L11:
 115:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 204              		.loc 1 115 18 view .LVU72
 205 007a 0021     		movs	r1, #0
 206              	.LVL19:
 207              	.L3:
 205:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 }
 206:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 else
 207:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 {
 208:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 209:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                     /* Timer dispatch routine is waiting to execute, no more remaining ticks for th
 210:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                     ticks_left =  ((ULONG) 0);
 211:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 }
 212:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 213:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         }
 214:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     }
 215:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 216:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Setup return values for an inactive timer.  */
ARM GAS  /tmp/cc2Ngwvl.s 			page 19


 217:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     if (active != TX_NULL)
 208              		.loc 1 217 5 is_stmt 1 view .LVU73
 209              		.loc 1 217 8 is_stmt 0 view .LVU74
 210 007c 02B1     		cbz	r2, .L7
 218:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     {
 219:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 220:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****        /* Setup the timer active indication.  */
 221:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****        *active =  timer_active;
 211              		.loc 1 221 8 is_stmt 1 view .LVU75
 212              		.loc 1 221 16 is_stmt 0 view .LVU76
 213 007e 1160     		str	r1, [r2]
 214              	.L7:
 222:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     }
 223:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     if (remaining_ticks != TX_NULL)
 215              		.loc 1 223 5 is_stmt 1 view .LVU77
 216              		.loc 1 223 8 is_stmt 0 view .LVU78
 217 0080 03B1     		cbz	r3, .L8
 224:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     {
 225:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 226:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         /* Setup the default remaining ticks value.  */
 227:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         *remaining_ticks =  ticks_left;
 218              		.loc 1 227 9 is_stmt 1 view .LVU79
 219              		.loc 1 227 26 is_stmt 0 view .LVU80
 220 0082 1C60     		str	r4, [r3]
 221              	.L8:
 228:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     }
 229:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 230:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Pickup the reschedule ticks value.  */
 231:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     if (reschedule_ticks != TX_NULL)
 222              		.loc 1 231 5 is_stmt 1 view .LVU81
 223              		.loc 1 231 8 is_stmt 0 view .LVU82
 224 0084 0EB1     		cbz	r6, .L9
 232:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     {
 233:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 234:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         *reschedule_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 225              		.loc 1 234 9 is_stmt 1 view .LVU83
 226              		.loc 1 234 43 is_stmt 0 view .LVU84
 227 0086 C368     		ldr	r3, [r0, #12]
 228              	.LVL20:
 229              		.loc 1 234 27 view .LVU85
 230 0088 3360     		str	r3, [r6]
 231              	.L9:
 235:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     }
 236:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 237:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Pickup the next created application timer.  */
 238:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     if (next_timer != TX_NULL)
 232              		.loc 1 238 5 is_stmt 1 view .LVU86
 233              		.loc 1 238 8 is_stmt 0 view .LVU87
 234 008a 0DB1     		cbz	r5, .L10
 239:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     {
 240:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 241:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****         *next_timer =  timer_ptr -> tx_timer_created_next;
 235              		.loc 1 241 9 is_stmt 1 view .LVU88
 236              		.loc 1 241 34 is_stmt 0 view .LVU89
 237 008c 436A     		ldr	r3, [r0, #36]
 238              		.loc 1 241 21 view .LVU90
 239 008e 2B60     		str	r3, [r5]
ARM GAS  /tmp/cc2Ngwvl.s 			page 20


 240              	.L10:
 242:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     }
 243:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 244:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Restore interrupts.  */
 245:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     TX_RESTORE
 241              		.loc 1 245 5 is_stmt 1 view .LVU91
 242              	.LVL21:
 243              	.LBB14:
 244              	.LBI14:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 245              		.loc 2 568 55 view .LVU92
 246              	.LBB15:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 247              		.loc 2 574 5 view .LVU93
 248              		.syntax unified
 249              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 250 0090 8CF31088 		MSR  PRIMASK,ip
 251              	@ 0 "" 2
 252              	.LVL22:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 253              		.loc 2 574 5 is_stmt 0 view .LVU94
 254              		.thumb
 255              		.syntax unified
 256              	.LBE15:
 257              	.LBE14:
 246:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 247:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     /* Return completion status.  */
 248:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****     return(TX_SUCCESS);
 258              		.loc 1 248 5 is_stmt 1 view .LVU95
 249:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** }
 259              		.loc 1 249 1 is_stmt 0 view .LVU96
 260 0094 0020     		movs	r0, #0
 261              	.LVL23:
 262              		.loc 1 249 1 view .LVU97
 263 0096 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 264              	.LVL24:
 265              	.L12:
 266              		.loc 1 249 1 view .LVU98
 267 009a 0C46     		mov	r4, r1
 125:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 268              		.loc 1 125 22 view .LVU99
 269 009c 0121     		movs	r1, #1
 270              	.LVL25:
 125:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 271              		.loc 1 125 22 view .LVU100
 272 009e EDE7     		b	.L3
 273              	.LVL26:
 274              	.L13:
 125:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 275              		.loc 1 125 22 view .LVU101
 276 00a0 0121     		movs	r1, #1
 191:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 277              		.loc 1 191 28 view .LVU102
 278 00a2 0024     		movs	r4, #0
 279              	.LVL27:
 191:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****             }
 280              		.loc 1 191 28 view .LVU103
ARM GAS  /tmp/cc2Ngwvl.s 			page 21


 281 00a4 EAE7     		b	.L3
 282              	.LVL28:
 283              	.L14:
 125:Middlewares/ST/threadx/common/src/tx_timer_info_get.c **** 
 284              		.loc 1 125 22 view .LVU104
 285 00a6 0121     		movs	r1, #1
 210:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 }
 286              		.loc 1 210 32 view .LVU105
 287 00a8 0024     		movs	r4, #0
 288              	.LVL29:
 210:Middlewares/ST/threadx/common/src/tx_timer_info_get.c ****                 }
 289              		.loc 1 210 32 view .LVU106
 290 00aa E7E7     		b	.L3
 291              	.L17:
 292              		.align	2
 293              	.L16:
 294 00ac 00000000 		.word	_tx_timer_list_start
 295 00b0 00000000 		.word	_tx_timer_list_end
 296 00b4 00000000 		.word	_tx_timer_expired_timer_ptr
 297 00b8 00000000 		.word	_tx_timer_current_ptr
 298              		.cfi_endproc
 299              	.LFE8:
 301              		.text
 302              	.Letext0:
 303              		.file 3 "Middlewares/ST/threadx/common/inc/tx_api.h"
 304              		.file 4 "Middlewares/ST/threadx/common/inc/tx_timer.h"
ARM GAS  /tmp/cc2Ngwvl.s 			page 22


DEFINED SYMBOLS
                            *ABS*:00000000 tx_timer_info_get.c
     /tmp/cc2Ngwvl.s:20     .text._tx_timer_info_get:00000000 $t
     /tmp/cc2Ngwvl.s:26     .text._tx_timer_info_get:00000000 _tx_timer_info_get
     /tmp/cc2Ngwvl.s:294    .text._tx_timer_info_get:000000ac $d

UNDEFINED SYMBOLS
_tx_timer_list_start
_tx_timer_list_end
_tx_timer_expired_timer_ptr
_tx_timer_current_ptr
