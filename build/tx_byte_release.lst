ARM GAS  /tmp/cchUAbf8.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"tx_byte_release.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Middlewares/ST/threadx/common/src/tx_byte_release.c"
  19              		.section	.text._tx_byte_release,"ax",%progbits
  20              		.align	1
  21              		.global	_tx_byte_release
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_tx_byte_release:
  27              	.LVL0:
  28              	.LFB8:
   1:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /**************************************************************************/
   2:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
   3:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
   5:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  10:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /**************************************************************************/
  11:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
  12:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
  13:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /**************************************************************************/
  14:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /**************************************************************************/
  15:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /**                                                                       */
  16:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /**                                                                       */
  18:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /**   Byte Memory                                                         */
  19:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /**                                                                       */
  20:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /**************************************************************************/
  21:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /**************************************************************************/
  22:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
  23:Middlewares/ST/threadx/common/src/tx_byte_release.c **** #define TX_SOURCE_CODE
  24:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
  25:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
  26:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /* Include necessary system files.  */
  27:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
  28:Middlewares/ST/threadx/common/src/tx_byte_release.c **** #include "tx_api.h"
  29:Middlewares/ST/threadx/common/src/tx_byte_release.c **** #include "tx_trace.h"
  30:Middlewares/ST/threadx/common/src/tx_byte_release.c **** #include "tx_thread.h"
ARM GAS  /tmp/cchUAbf8.s 			page 2


  31:Middlewares/ST/threadx/common/src/tx_byte_release.c **** #include "tx_byte_pool.h"
  32:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
  33:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
  34:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /**************************************************************************/
  35:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  36:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*  FUNCTION                                               RELEASE        */
  37:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  38:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*    _tx_byte_release                                    PORTABLE C      */
  39:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                           6.1          */
  40:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*  AUTHOR                                                                */
  41:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  42:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  44:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*  DESCRIPTION                                                           */
  45:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  46:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*    This function returns previously allocated memory to its            */
  47:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*    associated memory byte pool.                                        */
  48:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  49:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*  INPUT                                                                 */
  50:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  51:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*    memory_ptr                        Pointer to allocated memory       */
  52:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  53:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*  OUTPUT                                                                */
  54:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  55:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*    [TX_PTR_ERROR | TX_SUCCESS]       Completion status                 */
  56:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  57:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*  CALLS                                                                 */
  58:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  59:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*    _tx_thread_system_preempt_check   Check for preemption              */
  60:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*    _tx_thread_system_resume          Resume thread service             */
  61:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*    _tx_thread_system_ni_resume       Non-interruptable resume thread   */
  62:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*    _tx_byte_pool_search              Search the byte pool for memory   */
  63:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  64:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*  CALLED BY                                                             */
  65:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  66:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*    Application Code                                                    */
  67:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  68:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*  RELEASE HISTORY                                                       */
  69:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  70:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*    DATE              NAME                      DESCRIPTION             */
  71:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  72:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  73:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  74:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                            resulting in version 6.1    */
  75:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /*                                                                        */
  76:Middlewares/ST/threadx/common/src/tx_byte_release.c **** /**************************************************************************/
  77:Middlewares/ST/threadx/common/src/tx_byte_release.c **** UINT  _tx_byte_release(VOID *memory_ptr)
  78:Middlewares/ST/threadx/common/src/tx_byte_release.c **** {
  29              		.loc 1 78 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 78 1 is_stmt 0 view .LVU1
  34 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 24
  37              		.cfi_offset 4, -24
ARM GAS  /tmp/cchUAbf8.s 			page 3


  38              		.cfi_offset 5, -20
  39              		.cfi_offset 6, -16
  40              		.cfi_offset 7, -12
  41              		.cfi_offset 8, -8
  42              		.cfi_offset 14, -4
  43 0004 0446     		mov	r4, r0
  79:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
  80:Middlewares/ST/threadx/common/src/tx_byte_release.c **** TX_INTERRUPT_SAVE_AREA
  44              		.loc 1 80 1 is_stmt 1 view .LVU2
  81:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
  82:Middlewares/ST/threadx/common/src/tx_byte_release.c **** UINT                status;
  45              		.loc 1 82 1 view .LVU3
  83:Middlewares/ST/threadx/common/src/tx_byte_release.c **** TX_BYTE_POOL        *pool_ptr;
  46              		.loc 1 83 1 view .LVU4
  84:Middlewares/ST/threadx/common/src/tx_byte_release.c **** TX_THREAD           *thread_ptr;
  47              		.loc 1 84 1 view .LVU5
  85:Middlewares/ST/threadx/common/src/tx_byte_release.c **** UCHAR               *work_ptr;
  48              		.loc 1 85 1 view .LVU6
  86:Middlewares/ST/threadx/common/src/tx_byte_release.c **** UCHAR               *temp_ptr;
  49              		.loc 1 86 1 view .LVU7
  87:Middlewares/ST/threadx/common/src/tx_byte_release.c **** UCHAR               *next_block_ptr;
  50              		.loc 1 87 1 view .LVU8
  88:Middlewares/ST/threadx/common/src/tx_byte_release.c **** TX_THREAD           *susp_thread_ptr;
  51              		.loc 1 88 1 view .LVU9
  89:Middlewares/ST/threadx/common/src/tx_byte_release.c **** UINT                suspended_count;
  52              		.loc 1 89 1 view .LVU10
  90:Middlewares/ST/threadx/common/src/tx_byte_release.c **** TX_THREAD           *next_thread;
  53              		.loc 1 90 1 view .LVU11
  91:Middlewares/ST/threadx/common/src/tx_byte_release.c **** TX_THREAD           *previous_thread;
  54              		.loc 1 91 1 view .LVU12
  92:Middlewares/ST/threadx/common/src/tx_byte_release.c **** ULONG               memory_size;
  55              		.loc 1 92 1 view .LVU13
  93:Middlewares/ST/threadx/common/src/tx_byte_release.c **** ALIGN_TYPE          *free_ptr;
  56              		.loc 1 93 1 view .LVU14
  94:Middlewares/ST/threadx/common/src/tx_byte_release.c **** TX_BYTE_POOL        **byte_pool_ptr;
  57              		.loc 1 94 1 view .LVU15
  95:Middlewares/ST/threadx/common/src/tx_byte_release.c **** UCHAR               **block_link_ptr;
  58              		.loc 1 95 1 view .LVU16
  96:Middlewares/ST/threadx/common/src/tx_byte_release.c **** UCHAR               **suspend_info_ptr;
  59              		.loc 1 96 1 view .LVU17
  97:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
  98:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
  99:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     /* Default to successful status.  */
 100:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     status =  TX_SUCCESS;
  60              		.loc 1 100 5 view .LVU18
  61              	.LVL1:
 101:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 102:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     /* Set the pool pointer to NULL.  */
 103:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     pool_ptr =  TX_NULL;
  62              		.loc 1 103 5 view .LVU19
 104:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 105:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     /* Lockout interrupts.  */
 106:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     TX_DISABLE
  63              		.loc 1 106 5 view .LVU20
  64              	.LBB26:
  65              	.LBI26:
  66              		.file 2 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h"
ARM GAS  /tmp/cchUAbf8.s 			page 4


   1:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
   2:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   3:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   5:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  10:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  11:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  12:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  13:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  14:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  15:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  16:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  18:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  20:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  21:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  22:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  23:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  24:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  25:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  26:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  28:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M7/GNU     */
  29:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                           6.1.12       */
  30:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  31:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  33:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  35:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  37:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  46:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  49:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  51:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  53:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
ARM GAS  /tmp/cchUAbf8.s 			page 5


  58:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  04-25-2022      Scott Larson            Modified comments and added   */
  60:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            volatile to registers,      */
  61:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.11 */
  62:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  07-29-2022      Scott Larson            Modified comments and         */
  63:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            described BASEPRI usage,    */
  64:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.12 */
  65:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  66:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  67:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  68:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  69:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_H
  70:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  71:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  72:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  73:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  74:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  75:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  76:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  77:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  78:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  79:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_user.h"
  80:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  81:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  82:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  83:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  84:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  85:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <stdlib.h>
  86:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <string.h>
  87:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  88:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  89:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  90:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  91:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  92:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <yvals.h>
  93:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  94:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  95:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  96:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
  97:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  98:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  99:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 100:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 101:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 102:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
 103:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
 104:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
 105:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 106:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 107:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef __GNUC__
 108:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 109:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 110:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 111:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 112:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 113:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define VOID                                    void
 114:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef char                                    CHAR;
ARM GAS  /tmp/cchUAbf8.s 			page 6


 115:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 116:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef int                                     INT;
 117:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 118:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef long                                    LONG;
 119:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 120:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 121:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 122:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 123:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 124:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 125:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 126:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 127:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 128:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 129:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 130:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 131:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 132:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 133:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 134:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 135:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 136:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 137:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 138:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 139:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 140:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 141:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 142:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 143:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 144:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 145:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 146:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 147:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 148:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 149:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 150:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 151:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 152:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* By default, ThreadX for Cortex-M uses the PRIMASK register to enable/disable interrupts.
 153:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** If using BASEPRI is desired, define the following two symbols for both c and assembly files:
 154:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_USE_BASEPRI - This tells ThreadX to use BASEPRI instead of PRIMASK.
 155:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_BASEPRI = (priority_mask << (8 - number_priority_bits)) - this defines the maximum priority
 156:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** Any interrupt with a higher priority than priority_mask will not be masked, thus the interrupt will
 157:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 158:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 159:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 160:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 161:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 162:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 163:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 164:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 165:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 166:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 167:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    source constants would be:
 168:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 169:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0x0a800024)
 170:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 171:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/cchUAbf8.s 			page 7


 172:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 173:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 174:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 175:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 176:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0xE0001004)
 177:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 178:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 179:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 180:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 181:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 182:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 183:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 184:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 185:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 186:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 187:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
 188:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 189:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 190:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 191:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 192:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 193:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 194:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 195:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 196:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 197:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 198:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 199:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 200:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 201:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 202:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 203:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 204:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 205:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 206:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 207:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 208:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 209:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 210:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    a function call.  */
 211:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 212:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 213:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 214:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 215:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 216:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 217:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 218:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 219:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 220:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 221:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 222:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 223:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    logic.  */
 224:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 225:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 226:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 227:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 228:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/cchUAbf8.s 			page 8


 229:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 230:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 231:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 232:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 233:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 234:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 235:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 236:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 237:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 238:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 239:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 240:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 241:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 242:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 243:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 244:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 245:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 246:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 247:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 248:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 249:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 250:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 251:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 252:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 253:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 254:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 255:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 256:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 257:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 258:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 259:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 260:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 261:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 262:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 263:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 264:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 265:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 266:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 267:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 268:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 269:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 270:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 271:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 272:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 273:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 274:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 275:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 276:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 277:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 278:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 279:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 280:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 281:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 282:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 283:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 284:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 285:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
ARM GAS  /tmp/cchUAbf8.s 			page 9


 286:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 287:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 288:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 289:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 290:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 291:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 292:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 293:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 294:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 295:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 296:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 297:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 298:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 299:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 300:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 301:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 302:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 303:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 304:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 305:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 306:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 307:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 308:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 309:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 310:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 311:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 312:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 313:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 314:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 315:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 316:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 317:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 318:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 319:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 320:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 321:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 322:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 323:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 324:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 325:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 326:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 327:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 328:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 329:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 330:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 331:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 332:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 333:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 334:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 335:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 336:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 337:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 338:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 339:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 340:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 341:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 342:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
ARM GAS  /tmp/cchUAbf8.s 			page 10


 343:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 344:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 345:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 346:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 347:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 348:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 349:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 350:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 351:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 352:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 353:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 354:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 355:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 356:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 357:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 358:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 359:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 360:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 361:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 362:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 363:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 364:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 365:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 366:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 367:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 368:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 369:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 370:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 371:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 372:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 373:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 374:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 375:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 376:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 377:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 378:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 379:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 380:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 381:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 382:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 383:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 384:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 385:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 386:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 387:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 388:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 389:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 390:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 391:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 392:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 393:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((volatile ULONG *) 0xE00
 394:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 395:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 396:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 397:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 398:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 399:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
ARM GAS  /tmp/cchUAbf8.s 			page 11


 400:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 401:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 402:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 403:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 404:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 405:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 406:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 407:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 408:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 409:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 410:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 411:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 412:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 413:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 414:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 415:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 416:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 417:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 418:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 419:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 420:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 421:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 422:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 423:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 424:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 425:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 426:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 427:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 428:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 429:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 430:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 431:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 432:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 433:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 434:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 435:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 436:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 437:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 438:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 439:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 440:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 441:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 442:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 443:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 444:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 445:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 446:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 447:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 448:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 449:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 450:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 451:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 452:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 453:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 454:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 455:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 456:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
ARM GAS  /tmp/cchUAbf8.s 			page 12


 457:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 458:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 459:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 460:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 461:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 462:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 463:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 464:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 465:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 466:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 467:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 468:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 469:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 470:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 471:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 472:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 473:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 474:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 475:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 476:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 477:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 478:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 479:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 480:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 481:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 482:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 483:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 484:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 485:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 486:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 487:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 488:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 489:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 490:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(ipsr_value);
 491:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 492:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 493:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 494:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 495:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 496:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 497:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 498:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 499:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 500:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 501:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 502:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 503:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 504:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 505:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 506:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 507:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 508:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 509:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 510:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 511:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 512:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 513:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
ARM GAS  /tmp/cchUAbf8.s 			page 13


 514:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 515:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 516:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 517:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 518:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 519:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 520:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 521:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 522:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 523:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 524:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 525:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 526:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 527:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 528:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 529:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 530:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 531:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 532:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 533:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 534:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 535:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 536:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 537:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 538:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 539:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 540:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 541:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 542:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 543:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 544:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 546:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int posture;
 548:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 549:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 550:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 552:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(posture);
 554:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 555:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 556:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 557:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 558:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 559:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 560:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 561:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 562:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 563:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 564:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 565:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 566:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 567:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 569:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 570:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
ARM GAS  /tmp/cchUAbf8.s 			page 14


 571:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 572:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 573:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 575:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 576:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 577:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  67              		.loc 2 578 63 view .LVU21
  68              	.LBB27:
 579:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int int_posture;
  69              		.loc 2 580 1 view .LVU22
 581:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  70              		.loc 2 582 5 view .LVU23
  71              	.LBB28:
  72              	.LBI28:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
  73              		.loc 2 545 63 view .LVU24
  74              	.LBB29:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  75              		.loc 2 547 1 view .LVU25
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  76              		.loc 2 551 5 view .LVU26
  77              		.syntax unified
  78              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  79 0006 EFF3108C 		MRS  ip, PRIMASK 
  80              	@ 0 "" 2
  81              	.LVL2:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  82              		.loc 2 553 5 view .LVU27
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  83              		.loc 2 553 5 is_stmt 0 view .LVU28
  84              		.thumb
  85              		.syntax unified
  86              	.LBE29:
  87              	.LBE28:
 583:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 584:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 585:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 586:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  88              		.loc 2 587 5 is_stmt 1 view .LVU29
  89              		.syntax unified
  90              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  91 000a 72B6     		CPSID i
  92              	@ 0 "" 2
 588:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 589:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(int_posture);
  93              		.loc 2 589 5 view .LVU30
  94              	.LVL3:
  95              		.loc 2 589 5 is_stmt 0 view .LVU31
  96              		.thumb
  97              		.syntax unified
  98              	.LBE27:
  99              	.LBE26:
ARM GAS  /tmp/cchUAbf8.s 			page 15


 107:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 108:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     /* Determine if the memory pointer is valid.  */
 109:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(memory_ptr);
 100              		.loc 1 109 5 is_stmt 1 view .LVU32
 110:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     if (work_ptr != TX_NULL)
 101              		.loc 1 110 5 view .LVU33
 102              		.loc 1 110 8 is_stmt 0 view .LVU34
 103 000c 88B1     		cbz	r0, .L14
 111:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     {
 112:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 113:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* Back off the memory pointer to pickup its header.  */
 114:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 104              		.loc 1 114 9 is_stmt 1 view .LVU35
 105              		.loc 1 114 18 is_stmt 0 view .LVU36
 106 000e A0F10803 		sub	r3, r0, #8
 107              	.LVL4:
 115:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 116:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* There is a pointer, pickup the pool pointer address.  */
 117:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 108              		.loc 1 117 9 is_stmt 1 view .LVU37
 118:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 109              		.loc 1 118 9 view .LVU38
 119:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         if ((*free_ptr) != TX_BYTE_BLOCK_FREE)
 110              		.loc 1 119 9 view .LVU39
 111              		.loc 1 119 14 is_stmt 0 view .LVU40
 112 0012 50F8042C 		ldr	r2, [r0, #-4]
 113              		.loc 1 119 12 view .LVU41
 114 0016 3E49     		ldr	r1, .L23
 115 0018 8A42     		cmp	r2, r1
 116 001a 0DD0     		beq	.L15
 120:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         {
 121:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 122:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             /* Pickup the pool pointer.  */
 123:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 117              		.loc 1 123 13 is_stmt 1 view .LVU42
 124:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             byte_pool_ptr =  TX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 118              		.loc 1 124 13 view .LVU43
 119              	.LVL5:
 125:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             pool_ptr =  *byte_pool_ptr;
 120              		.loc 1 125 13 view .LVU44
 121 001c 1446     		mov	r4, r2
 122              	.LVL6:
 126:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 127:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             /* See if we have a valid pool pointer.  */
 128:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             if (pool_ptr == TX_NULL)
 123              		.loc 1 128 13 view .LVU45
 124              		.loc 1 128 16 is_stmt 0 view .LVU46
 125 001e 72B1     		cbz	r2, .L16
 129:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             {
 130:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 131:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 /* Return pointer error.  */
 132:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 status =  TX_PTR_ERROR;
 133:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             }
 134:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             else
 135:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             {
 136:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 137:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 /* See if we have a valid pool.  */
ARM GAS  /tmp/cchUAbf8.s 			page 16


 138:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 126              		.loc 1 138 17 is_stmt 1 view .LVU47
 127              		.loc 1 138 30 is_stmt 0 view .LVU48
 128 0020 1168     		ldr	r1, [r2]
 129              		.loc 1 138 20 view .LVU49
 130 0022 3C4A     		ldr	r2, .L23+4
 131              	.LVL7:
 132              		.loc 1 138 20 view .LVU50
 133 0024 9142     		cmp	r1, r2
 134 0026 02D0     		beq	.L20
 139:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 {
 140:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 141:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     /* Return pointer error.  */
 142:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     status =  TX_PTR_ERROR;
 143:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 144:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     /* Reset the pool pointer is NULL.  */
 145:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     pool_ptr =  TX_NULL;
 135              		.loc 1 145 30 view .LVU51
 136 0028 0024     		movs	r4, #0
 137              	.LVL8:
 142:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 138              		.loc 1 142 28 view .LVU52
 139 002a 0326     		movs	r6, #3
 140 002c 08E0     		b	.L2
 141              	.LVL9:
 142              	.L20:
 100:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 143              		.loc 1 100 12 view .LVU53
 144 002e 0026     		movs	r6, #0
 145 0030 06E0     		b	.L2
 146              	.LVL10:
 147              	.L14:
 109:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     if (work_ptr != TX_NULL)
 148              		.loc 1 109 14 view .LVU54
 149 0032 0346     		mov	r3, r0
 146:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 }
 147:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             }
 148:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         }
 149:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         else
 150:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         {
 151:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 152:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             /* Return pointer error.  */
 153:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             status =  TX_PTR_ERROR;
 154:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         }
 155:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     }
 156:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     else
 157:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     {
 158:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 159:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* Return pointer error.  */
 160:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         status =  TX_PTR_ERROR;
 150              		.loc 1 160 16 view .LVU55
 151 0034 0326     		movs	r6, #3
 152 0036 03E0     		b	.L2
 153              	.LVL11:
 154              	.L15:
 103:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 155              		.loc 1 103 14 view .LVU56
ARM GAS  /tmp/cchUAbf8.s 			page 17


 156 0038 0024     		movs	r4, #0
 153:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         }
 157              		.loc 1 153 20 view .LVU57
 158 003a 0326     		movs	r6, #3
 159 003c 00E0     		b	.L2
 160              	.LVL12:
 161              	.L16:
 132:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             }
 162              		.loc 1 132 24 view .LVU58
 163 003e 0326     		movs	r6, #3
 164              	.LVL13:
 165              	.L2:
 161:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     }
 162:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 163:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     /* Determine if the pointer is valid.  */
 164:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     if (pool_ptr == TX_NULL)
 166              		.loc 1 164 5 is_stmt 1 view .LVU59
 167              		.loc 1 164 8 is_stmt 0 view .LVU60
 168 0040 94B1     		cbz	r4, .L21
 165:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     {
 166:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 167:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* Restore interrupts.  */
 168:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         TX_RESTORE
 169:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     }
 170:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     else
 171:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     {
 172:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 173:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* At this point, we know that the pointer is valid.  */
 174:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 175:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* Pickup thread pointer.  */
 176:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         TX_THREAD_GET_CURRENT(thread_ptr)
 169              		.loc 1 176 9 is_stmt 1 view .LVU61
 170 0042 354A     		ldr	r2, .L23+8
 171 0044 1568     		ldr	r5, [r2]
 172              	.LVL14:
 177:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 178:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* Indicate that this thread is the current owner.  */
 179:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 173              		.loc 1 179 9 view .LVU62
 174              		.loc 1 179 40 is_stmt 0 view .LVU63
 175 0046 2562     		str	r5, [r4, #32]
 180:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 181:Middlewares/ST/threadx/common/src/tx_byte_release.c **** #ifdef TX_BYTE_POOL_ENABLE_PERFORMANCE_INFO
 182:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 183:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* Increment the total release counter.  */
 184:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         _tx_byte_pool_performance_release_count++;
 185:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 186:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* Increment the number of releases on this pool.  */
 187:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         pool_ptr -> tx_byte_pool_performance_release_count++;
 188:Middlewares/ST/threadx/common/src/tx_byte_release.c **** #endif
 189:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 190:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* If trace is enabled, insert this event into the trace buffer.  */
 191:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_RELEASE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(memory
 192:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 193:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* Log this kernel call.  */
 194:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         TX_EL_BYTE_RELEASE_INSERT
 195:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
ARM GAS  /tmp/cchUAbf8.s 			page 18


 196:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* Release the memory.  */
 197:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         temp_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 176              		.loc 1 197 9 is_stmt 1 view .LVU64
 177              	.LVL15:
 198:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         free_ptr =   TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 178              		.loc 1 198 9 view .LVU65
 199:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         *free_ptr =  TX_BYTE_BLOCK_FREE;
 179              		.loc 1 199 9 view .LVU66
 180              		.loc 1 199 19 is_stmt 0 view .LVU67
 181 0048 314A     		ldr	r2, .L23
 182 004a 5A60     		str	r2, [r3, #4]
 200:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 201:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* Update the number of available bytes in the pool.  */
 202:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 183              		.loc 1 202 9 is_stmt 1 view .LVU68
 184              	.LVL16:
 203:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         next_block_ptr =  *block_link_ptr;
 185              		.loc 1 203 9 view .LVU69
 186              		.loc 1 203 24 is_stmt 0 view .LVU70
 187 004c 1968     		ldr	r1, [r3]
 188              	.LVL17:
 204:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         pool_ptr -> tx_byte_pool_available =
 189              		.loc 1 204 9 is_stmt 1 view .LVU71
 205:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 190              		.loc 1 205 22 is_stmt 0 view .LVU72
 191 004e A268     		ldr	r2, [r4, #8]
 192              		.loc 1 205 50 view .LVU73
 193 0050 C91A     		subs	r1, r1, r3
 194              	.LVL18:
 195              		.loc 1 205 48 view .LVU74
 196 0052 0A44     		add	r2, r2, r1
 204:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         pool_ptr -> tx_byte_pool_available =
 197              		.loc 1 204 44 view .LVU75
 198 0054 A260     		str	r2, [r4, #8]
 199              	.LVL19:
 206:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 207:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* Determine if the free block is prior to current search pointer.  */
 208:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 200              		.loc 1 208 9 is_stmt 1 view .LVU76
 201              		.loc 1 208 34 is_stmt 0 view .LVU77
 202 0056 6269     		ldr	r2, [r4, #20]
 203              		.loc 1 208 12 view .LVU78
 204 0058 9A42     		cmp	r2, r3
 205 005a 00D9     		bls	.L5
 209:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         {
 210:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 211:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             /* Yes, update the search pointer to the released block.  */
 212:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             pool_ptr -> tx_byte_pool_search =  work_ptr;
 206              		.loc 1 212 13 is_stmt 1 view .LVU79
 207              		.loc 1 212 45 is_stmt 0 view .LVU80
 208 005c 6361     		str	r3, [r4, #20]
 209              	.L5:
 213:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         }
 214:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 215:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         /* Determine if there are threads suspended on this byte pool.  */
 216:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 210              		.loc 1 216 9 is_stmt 1 view .LVU81
ARM GAS  /tmp/cchUAbf8.s 			page 19


 211              		.loc 1 216 22 is_stmt 0 view .LVU82
 212 005e A36A     		ldr	r3, [r4, #40]
 213              	.LVL20:
 214              		.loc 1 216 12 view .LVU83
 215 0060 4BBB     		cbnz	r3, .L6
 217:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         {
 218:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 219:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             /* Now examine the suspension list to find threads waiting for
 220:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                memory.  Maybe it is now available!  */
 221:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 222:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             {
 223:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 224:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 /* Pickup the first suspended thread pointer.  */
 225:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 susp_thread_ptr =  pool_ptr -> tx_byte_pool_suspension_list;
 226:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 227:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 /* Pickup the size of the memory the thread is requesting.  */
 228:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 memory_size =  susp_thread_ptr -> tx_thread_suspend_info;
 229:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 230:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 /* Restore interrupts.  */
 231:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 TX_RESTORE
 232:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 233:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 /* See if the request can be satisfied.  */
 234:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 235:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 236:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 /* Optional processing extension.  */
 237:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 TX_BYTE_RELEASE_EXTENSION
 238:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 239:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 /* Disable interrupts.  */
 240:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 TX_DISABLE
 241:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 242:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 /* Indicate that this thread is the current owner.  */
 243:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 244:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 245:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 /* If there is not enough memory, break this loop!  */
 246:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 if (work_ptr == TX_NULL)
 247:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 {
 248:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 249:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                   /* Break out of the loop.  */
 250:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     break;
 251:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 }
 252:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 253:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 /* Check to make sure the thread is still suspended.  */
 254:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 if (susp_thread_ptr ==  pool_ptr -> tx_byte_pool_suspension_list)
 255:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 {
 256:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 257:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     /* Also, makes sure the memory size is the same.  */
 258:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     if (susp_thread_ptr -> tx_thread_suspend_info == memory_size)
 259:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     {
 260:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 261:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Remove the suspended thread from the list.  */
 262:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 263:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Decrement the number of threads suspended.  */
 264:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         pool_ptr -> tx_byte_pool_suspended_count--;
 265:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 266:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Pickup the suspended count.  */
 267:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 268:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
ARM GAS  /tmp/cchUAbf8.s 			page 20


 269:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* See if this is the only suspended thread on the list.  */
 270:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         if (suspended_count == TX_NO_SUSPENSIONS)
 271:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         {
 272:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 273:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             /* Yes, the only suspended thread.  */
 274:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 275:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             /* Update the head pointer.  */
 276:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 277:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         }
 278:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         else
 279:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         {
 280:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 281:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             /* At least one more thread is on the same expiration list.  */
 282:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 283:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             /* Update the list head pointer.  */
 284:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             next_thread =                                susp_thread_ptr -> tx_thre
 285:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             pool_ptr -> tx_byte_pool_suspension_list =   next_thread;
 286:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 287:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             /* Update the links of the adjacent threads.  */
 288:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             previous_thread =                              susp_thread_ptr -> tx_th
 289:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             next_thread -> tx_thread_suspended_previous =  previous_thread;
 290:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             previous_thread -> tx_thread_suspended_next =  next_thread;
 291:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         }
 292:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 293:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Prepare for resumption of the thread.  */
 294:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 295:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Clear cleanup routine to avoid timeout.  */
 296:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         susp_thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 297:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 298:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Return this block pointer to the suspended thread waiting for
 299:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                            a block.  */
 300:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         suspend_info_ptr =   TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(susp_thread_
 301:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         *suspend_info_ptr =  work_ptr;
 302:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 303:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Clear the memory pointer to indicate that it was given to the suspended 
 304:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         work_ptr =  TX_NULL;
 305:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 306:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Put return status into the thread control block.  */
 307:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         susp_thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 308:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 309:Middlewares/ST/threadx/common/src/tx_byte_release.c **** #ifdef TX_NOT_INTERRUPTABLE
 310:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 311:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Resume the thread!  */
 312:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         _tx_thread_system_ni_resume(susp_thread_ptr);
 313:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 314:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Restore interrupts.  */
 315:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         TX_RESTORE
 316:Middlewares/ST/threadx/common/src/tx_byte_release.c **** #else
 317:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Temporarily disable preemption.  */
 318:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         _tx_thread_preempt_disable++;
 319:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 320:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Restore interrupts.  */
 321:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         TX_RESTORE
 322:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 323:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Resume thread.  */
 324:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         _tx_thread_system_resume(susp_thread_ptr);
 325:Middlewares/ST/threadx/common/src/tx_byte_release.c **** #endif
ARM GAS  /tmp/cchUAbf8.s 			page 21


 326:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 327:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Lockout interrupts.  */
 328:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         TX_DISABLE
 329:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     }
 330:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 }
 331:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 332:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 /* Determine if the memory was given to the suspended thread.  */
 333:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 if (work_ptr != TX_NULL)
 334:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 {
 335:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 336:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     /* No, it wasn't given to the suspended thread.  */
 337:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 338:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     /* Put the memory back on the available list since this thread is no longer
 339:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                        suspended.  */
 340:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_
 341:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 342:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 343:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     *free_ptr =  TX_BYTE_BLOCK_FREE;
 344:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 345:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     /* Update the number of available bytes in the pool.  */
 346:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 347:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     next_block_ptr =  *block_link_ptr;
 348:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     pool_ptr -> tx_byte_pool_available =
 349:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, w
 350:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 351:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     /* Determine if the current pointer is before the search pointer.  */
 352:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 353:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     {
 354:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 355:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         /* Yes, update the search pointer.  */
 356:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         pool_ptr -> tx_byte_pool_search =  work_ptr;
 357:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     }
 358:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 }
 359:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             }
 360:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 361:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             /* Restore interrupts.  */
 362:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             TX_RESTORE
 363:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 364:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             /* Check for preemption.  */
 365:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             _tx_thread_system_preempt_check();
 366:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         }
 367:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         else
 368:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         {
 369:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 370:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             /* No, threads suspended, restore interrupts.  */
 371:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             TX_RESTORE
 216              		.loc 1 371 13 is_stmt 1 view .LVU84
 217              	.LVL21:
 218              	.LBB30:
 219              	.LBI30:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 220              		.loc 2 568 55 view .LVU85
 221              	.LBB31:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 222              		.loc 2 574 5 view .LVU86
 223              		.syntax unified
 224              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
ARM GAS  /tmp/cchUAbf8.s 			page 22


 225 0062 8CF31088 		MSR  PRIMASK,ip
 226              	@ 0 "" 2
 227              	.LVL22:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 228              		.loc 2 574 5 is_stmt 0 view .LVU87
 229              		.thumb
 230              		.syntax unified
 231              	.LBE31:
 232              	.LBE30:
 372:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         }
 373:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     }
 374:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 375:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     /* Return completion status.  */
 376:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     return(status);
 233              		.loc 1 376 5 is_stmt 1 view .LVU88
 234              		.loc 1 376 11 is_stmt 0 view .LVU89
 235 0066 4FE0     		b	.L1
 236              	.LVL23:
 237              	.L21:
 168:Middlewares/ST/threadx/common/src/tx_byte_release.c ****     }
 238              		.loc 1 168 9 is_stmt 1 view .LVU90
 239              	.LBB32:
 240              	.LBI32:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 241              		.loc 2 568 55 view .LVU91
 242              	.LBB33:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 243              		.loc 2 574 5 view .LVU92
 244              		.syntax unified
 245              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 246 0068 8CF31088 		MSR  PRIMASK,ip
 247              	@ 0 "" 2
 248              	.LVL24:
 576:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 249              		.loc 2 576 1 is_stmt 0 view .LVU93
 250              		.thumb
 251              		.syntax unified
 252 006c 4CE0     		b	.L1
 253              	.LVL25:
 254              	.L22:
 576:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 255              		.loc 2 576 1 view .LVU94
 256              	.LBE33:
 257              	.LBE32:
 258:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     {
 258              		.loc 1 258 21 is_stmt 1 view .LVU95
 258:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     {
 259              		.loc 1 258 41 is_stmt 0 view .LVU96
 260 006e BB6F     		ldr	r3, [r7, #120]
 258:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     {
 261              		.loc 1 258 24 view .LVU97
 262 0070 4345     		cmp	r3, r8
 263 0072 33D1     		bne	.L9
 264:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 264              		.loc 1 264 25 is_stmt 1 view .LVU98
 264:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 265              		.loc 1 264 34 is_stmt 0 view .LVU99
ARM GAS  /tmp/cchUAbf8.s 			page 23


 266 0074 A36A     		ldr	r3, [r4, #40]
 264:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 267              		.loc 1 264 65 view .LVU100
 268 0076 013B     		subs	r3, r3, #1
 269 0078 A362     		str	r3, [r4, #40]
 267:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 270              		.loc 1 267 25 is_stmt 1 view .LVU101
 271              	.LVL26:
 270:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         {
 272              		.loc 1 270 25 view .LVU102
 270:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         {
 273              		.loc 1 270 28 is_stmt 0 view .LVU103
 274 007a B3B9     		cbnz	r3, .L10
 276:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         }
 275              		.loc 1 276 29 is_stmt 1 view .LVU104
 276:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         }
 276              		.loc 1 276 70 is_stmt 0 view .LVU105
 277 007c 6362     		str	r3, [r4, #36]
 278              	.LVL27:
 279              	.L11:
 296:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 280              		.loc 1 296 25 is_stmt 1 view .LVU106
 296:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 281              		.loc 1 296 70 is_stmt 0 view .LVU107
 282 007e 4FF00008 		mov	r8, #0
 283              	.LVL28:
 296:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 284              		.loc 1 296 70 view .LVU108
 285 0082 C7F86880 		str	r8, [r7, #104]
 300:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         *suspend_info_ptr =  work_ptr;
 286              		.loc 1 300 25 is_stmt 1 view .LVU109
 300:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         *suspend_info_ptr =  work_ptr;
 287              		.loc 1 300 42 is_stmt 0 view .LVU110
 288 0086 FB6F     		ldr	r3, [r7, #124]
 289              	.LVL29:
 301:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 290              		.loc 1 301 25 is_stmt 1 view .LVU111
 301:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 291              		.loc 1 301 43 is_stmt 0 view .LVU112
 292 0088 1860     		str	r0, [r3]
 304:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 293              		.loc 1 304 25 is_stmt 1 view .LVU113
 294              	.LVL30:
 307:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 295              		.loc 1 307 25 view .LVU114
 307:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 296              		.loc 1 307 69 is_stmt 0 view .LVU115
 297 008a C7F88480 		str	r8, [r7, #132]
 318:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 298              		.loc 1 318 25 is_stmt 1 view .LVU116
 318:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 299              		.loc 1 318 51 is_stmt 0 view .LVU117
 300 008e 234A     		ldr	r2, .L23+12
 301 0090 1368     		ldr	r3, [r2]
 302              	.LVL31:
 318:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 303              		.loc 1 318 51 view .LVU118
ARM GAS  /tmp/cchUAbf8.s 			page 24


 304 0092 0133     		adds	r3, r3, #1
 305 0094 1360     		str	r3, [r2]
 321:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 306              		.loc 1 321 25 is_stmt 1 view .LVU119
 307              	.LVL32:
 308              	.LBB34:
 309              	.LBI34:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 310              		.loc 2 568 55 view .LVU120
 311              	.LBB35:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 312              		.loc 2 574 5 view .LVU121
 313              		.syntax unified
 314              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 315 0096 8CF31088 		MSR  PRIMASK,ip
 316              	@ 0 "" 2
 317              	.LVL33:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 318              		.loc 2 574 5 is_stmt 0 view .LVU122
 319              		.thumb
 320              		.syntax unified
 321              	.LBE35:
 322              	.LBE34:
 324:Middlewares/ST/threadx/common/src/tx_byte_release.c **** #endif
 323              		.loc 1 324 25 is_stmt 1 view .LVU123
 324 009a 3846     		mov	r0, r7
 325 009c FFF7FEFF 		bl	_tx_thread_system_resume
 326              	.LVL34:
 328:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     }
 327              		.loc 1 328 25 view .LVU124
 328              	.LBB36:
 329              	.LBI36:
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 330              		.loc 2 578 63 view .LVU125
 331              	.LBB37:
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 332              		.loc 2 580 1 view .LVU126
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 333              		.loc 2 582 5 view .LVU127
 334              	.LBB38:
 335              	.LBI38:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 336              		.loc 2 545 63 view .LVU128
 337              	.LBB39:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 338              		.loc 2 547 1 view .LVU129
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 339              		.loc 2 551 5 view .LVU130
 340              		.syntax unified
 341              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 342 00a0 EFF3108C 		MRS  ip, PRIMASK 
 343              	@ 0 "" 2
 344              	.LVL35:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 345              		.loc 2 553 5 view .LVU131
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 346              		.loc 2 553 5 is_stmt 0 view .LVU132
ARM GAS  /tmp/cchUAbf8.s 			page 25


 347              		.thumb
 348              		.syntax unified
 349              	.LBE39:
 350              	.LBE38:
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 351              		.loc 2 587 5 is_stmt 1 view .LVU133
 352              		.syntax unified
 353              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 354 00a4 72B6     		CPSID i
 355              	@ 0 "" 2
 356              		.loc 2 589 5 view .LVU134
 357              	.LVL36:
 358              		.loc 2 589 5 is_stmt 0 view .LVU135
 359              		.thumb
 360              		.syntax unified
 361              	.LBE37:
 362              	.LBE36:
 304:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 363              		.loc 1 304 34 view .LVU136
 364 00a6 4046     		mov	r0, r8
 365 00a8 18E0     		b	.L9
 366              	.LVL37:
 367              	.L10:
 284:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             pool_ptr -> tx_byte_pool_suspension_list =   next_thread;
 368              		.loc 1 284 29 is_stmt 1 view .LVU137
 284:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             pool_ptr -> tx_byte_pool_suspension_list =   next_thread;
 369              		.loc 1 284 41 is_stmt 0 view .LVU138
 370 00aa 3B6F     		ldr	r3, [r7, #112]
 371              	.LVL38:
 285:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 372              		.loc 1 285 29 is_stmt 1 view .LVU139
 285:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 373              		.loc 1 285 70 is_stmt 0 view .LVU140
 374 00ac 6362     		str	r3, [r4, #36]
 288:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             next_thread -> tx_thread_suspended_previous =  previous_thread;
 375              		.loc 1 288 29 is_stmt 1 view .LVU141
 288:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             next_thread -> tx_thread_suspended_previous =  previous_thread;
 376              		.loc 1 288 45 is_stmt 0 view .LVU142
 377 00ae 7A6F     		ldr	r2, [r7, #116]
 378              	.LVL39:
 289:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             previous_thread -> tx_thread_suspended_next =  next_thread;
 379              		.loc 1 289 29 is_stmt 1 view .LVU143
 289:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                             previous_thread -> tx_thread_suspended_next =  next_thread;
 380              		.loc 1 289 73 is_stmt 0 view .LVU144
 381 00b0 5A67     		str	r2, [r3, #116]
 382              	.LVL40:
 290:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         }
 383              		.loc 1 290 29 is_stmt 1 view .LVU145
 290:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         }
 384              		.loc 1 290 73 is_stmt 0 view .LVU146
 385 00b2 1367     		str	r3, [r2, #112]
 386 00b4 E3E7     		b	.L11
 387              	.LVL41:
 388              	.L6:
 221:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             {
 389              		.loc 1 221 61 is_stmt 1 view .LVU147
 221:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             {
ARM GAS  /tmp/cchUAbf8.s 			page 26


 390              		.loc 1 221 29 is_stmt 0 view .LVU148
 391 00b6 A36A     		ldr	r3, [r4, #40]
 221:Middlewares/ST/threadx/common/src/tx_byte_release.c ****             {
 392              		.loc 1 221 61 view .LVU149
 393 00b8 13B3     		cbz	r3, .L8
 225:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 394              		.loc 1 225 17 is_stmt 1 view .LVU150
 225:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 395              		.loc 1 225 33 is_stmt 0 view .LVU151
 396 00ba 676A     		ldr	r7, [r4, #36]
 397              	.LVL42:
 228:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 398              		.loc 1 228 17 is_stmt 1 view .LVU152
 228:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 399              		.loc 1 228 29 is_stmt 0 view .LVU153
 400 00bc D7F87880 		ldr	r8, [r7, #120]
 401              	.LVL43:
 231:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 402              		.loc 1 231 17 is_stmt 1 view .LVU154
 403              	.LBB40:
 404              	.LBI40:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 405              		.loc 2 568 55 view .LVU155
 406              	.LBB41:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 407              		.loc 2 574 5 view .LVU156
 408              		.syntax unified
 409              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 410 00c0 8CF31088 		MSR  PRIMASK,ip
 411              	@ 0 "" 2
 412              	.LVL44:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 413              		.loc 2 574 5 is_stmt 0 view .LVU157
 414              		.thumb
 415              		.syntax unified
 416              	.LBE41:
 417              	.LBE40:
 234:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 418              		.loc 1 234 17 is_stmt 1 view .LVU158
 234:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 419              		.loc 1 234 29 is_stmt 0 view .LVU159
 420 00c4 4146     		mov	r1, r8
 421 00c6 2046     		mov	r0, r4
 422 00c8 FFF7FEFF 		bl	_tx_byte_pool_search
 423              	.LVL45:
 240:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 424              		.loc 1 240 17 is_stmt 1 view .LVU160
 425              	.LBB42:
 426              	.LBI42:
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 427              		.loc 2 578 63 view .LVU161
 428              	.LBB43:
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 429              		.loc 2 580 1 view .LVU162
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 430              		.loc 2 582 5 view .LVU163
 431              	.LBB44:
ARM GAS  /tmp/cchUAbf8.s 			page 27


 432              	.LBI44:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 433              		.loc 2 545 63 view .LVU164
 434              	.LBB45:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 435              		.loc 2 547 1 view .LVU165
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 436              		.loc 2 551 5 view .LVU166
 437              		.syntax unified
 438              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 439 00cc EFF3108C 		MRS  ip, PRIMASK 
 440              	@ 0 "" 2
 441              	.LVL46:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 442              		.loc 2 553 5 view .LVU167
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 443              		.loc 2 553 5 is_stmt 0 view .LVU168
 444              		.thumb
 445              		.syntax unified
 446              	.LBE45:
 447              	.LBE44:
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 448              		.loc 2 587 5 is_stmt 1 view .LVU169
 449              		.syntax unified
 450              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 451 00d0 72B6     		CPSID i
 452              	@ 0 "" 2
 453              		.loc 2 589 5 view .LVU170
 454              	.LVL47:
 455              		.loc 2 589 5 is_stmt 0 view .LVU171
 456              		.thumb
 457              		.syntax unified
 458              	.LBE43:
 459              	.LBE42:
 243:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 460              		.loc 1 243 17 is_stmt 1 view .LVU172
 243:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 461              		.loc 1 243 48 is_stmt 0 view .LVU173
 462 00d2 2562     		str	r5, [r4, #32]
 246:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 {
 463              		.loc 1 246 17 is_stmt 1 view .LVU174
 246:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 {
 464              		.loc 1 246 20 is_stmt 0 view .LVU175
 465 00d4 A0B1     		cbz	r0, .L8
 254:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 {
 466              		.loc 1 254 17 is_stmt 1 view .LVU176
 254:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 {
 467              		.loc 1 254 50 is_stmt 0 view .LVU177
 468 00d6 636A     		ldr	r3, [r4, #36]
 254:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 {
 469              		.loc 1 254 20 view .LVU178
 470 00d8 BB42     		cmp	r3, r7
 471 00da C8D0     		beq	.L22
 472              	.LVL48:
 473              	.L9:
 333:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 {
 474              		.loc 1 333 17 is_stmt 1 view .LVU179
ARM GAS  /tmp/cchUAbf8.s 			page 28


 333:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                 {
 475              		.loc 1 333 20 is_stmt 0 view .LVU180
 476 00dc 0028     		cmp	r0, #0
 477 00de EAD0     		beq	.L6
 340:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 478              		.loc 1 340 21 is_stmt 1 view .LVU181
 340:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 479              		.loc 1 340 30 is_stmt 0 view .LVU182
 480 00e0 A0F10801 		sub	r1, r0, #8
 481              	.LVL49:
 341:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 482              		.loc 1 341 21 is_stmt 1 view .LVU183
 342:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     *free_ptr =  TX_BYTE_BLOCK_FREE;
 483              		.loc 1 342 21 view .LVU184
 343:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 484              		.loc 1 343 21 view .LVU185
 343:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 485              		.loc 1 343 31 is_stmt 0 view .LVU186
 486 00e4 0A4B     		ldr	r3, .L23
 487 00e6 40F8043C 		str	r3, [r0, #-4]
 346:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     next_block_ptr =  *block_link_ptr;
 488              		.loc 1 346 21 is_stmt 1 view .LVU187
 489              	.LVL50:
 347:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     pool_ptr -> tx_byte_pool_available =
 490              		.loc 1 347 21 view .LVU188
 347:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     pool_ptr -> tx_byte_pool_available =
 491              		.loc 1 347 36 is_stmt 0 view .LVU189
 492 00ea 50F8082C 		ldr	r2, [r0, #-8]
 493              	.LVL51:
 348:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, w
 494              		.loc 1 348 21 is_stmt 1 view .LVU190
 349:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 495              		.loc 1 349 34 is_stmt 0 view .LVU191
 496 00ee A368     		ldr	r3, [r4, #8]
 349:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 497              		.loc 1 349 62 view .LVU192
 498 00f0 521A     		subs	r2, r2, r1
 499              	.LVL52:
 349:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 500              		.loc 1 349 60 view .LVU193
 501 00f2 1344     		add	r3, r3, r2
 348:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                         pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, w
 502              		.loc 1 348 56 view .LVU194
 503 00f4 A360     		str	r3, [r4, #8]
 504              	.LVL53:
 352:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     {
 505              		.loc 1 352 21 is_stmt 1 view .LVU195
 352:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     {
 506              		.loc 1 352 46 is_stmt 0 view .LVU196
 507 00f6 6369     		ldr	r3, [r4, #20]
 352:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     {
 508              		.loc 1 352 24 view .LVU197
 509 00f8 8B42     		cmp	r3, r1
 510 00fa DCD9     		bls	.L6
 356:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     }
 511              		.loc 1 356 25 is_stmt 1 view .LVU198
 356:Middlewares/ST/threadx/common/src/tx_byte_release.c ****                     }
ARM GAS  /tmp/cchUAbf8.s 			page 29


 512              		.loc 1 356 57 is_stmt 0 view .LVU199
 513 00fc 6161     		str	r1, [r4, #20]
 514 00fe DAE7     		b	.L6
 515              	.LVL54:
 516              	.L8:
 362:Middlewares/ST/threadx/common/src/tx_byte_release.c **** 
 517              		.loc 1 362 13 is_stmt 1 view .LVU200
 518              	.LBB46:
 519              	.LBI46:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 520              		.loc 2 568 55 view .LVU201
 521              	.LBB47:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 522              		.loc 2 574 5 view .LVU202
 523              		.syntax unified
 524              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 525 0100 8CF31088 		MSR  PRIMASK,ip
 526              	@ 0 "" 2
 527              	.LVL55:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 528              		.loc 2 574 5 is_stmt 0 view .LVU203
 529              		.thumb
 530              		.syntax unified
 531              	.LBE47:
 532              	.LBE46:
 365:Middlewares/ST/threadx/common/src/tx_byte_release.c ****         }
 533              		.loc 1 365 13 is_stmt 1 view .LVU204
 534 0104 FFF7FEFF 		bl	_tx_thread_system_preempt_check
 535              	.LVL56:
 536              	.L1:
 377:Middlewares/ST/threadx/common/src/tx_byte_release.c **** }
 537              		.loc 1 377 1 is_stmt 0 view .LVU205
 538 0108 3046     		mov	r0, r6
 539 010a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 540              	.LVL57:
 541              	.L24:
 542              		.loc 1 377 1 view .LVU206
 543 010e 00BF     		.align	2
 544              	.L23:
 545 0110 EEEEFFFF 		.word	-4370
 546 0114 45545942 		.word	1113150533
 547 0118 00000000 		.word	_tx_thread_current_ptr
 548 011c 00000000 		.word	_tx_thread_preempt_disable
 549              		.cfi_endproc
 550              	.LFE8:
 552              		.text
 553              	.Letext0:
 554              		.file 3 "Middlewares/ST/threadx/common/inc/tx_api.h"
 555              		.file 4 "Middlewares/ST/threadx/common/inc/tx_thread.h"
 556              		.file 5 "Middlewares/ST/threadx/common/inc/tx_byte_pool.h"
ARM GAS  /tmp/cchUAbf8.s 			page 30


DEFINED SYMBOLS
                            *ABS*:00000000 tx_byte_release.c
     /tmp/cchUAbf8.s:20     .text._tx_byte_release:00000000 $t
     /tmp/cchUAbf8.s:26     .text._tx_byte_release:00000000 _tx_byte_release
     /tmp/cchUAbf8.s:545    .text._tx_byte_release:00000110 $d

UNDEFINED SYMBOLS
_tx_thread_system_resume
_tx_byte_pool_search
_tx_thread_system_preempt_check
_tx_thread_current_ptr
_tx_thread_preempt_disable
